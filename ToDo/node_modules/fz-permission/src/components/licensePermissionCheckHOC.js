import React from 'react';
import { createSelector } from "reselect";
import { permissionCheck, licenseCheck } from '../utils';

export const licensePermissionCheckHOC=({ component={license:"*",permission:"*"},props={},Fallback=null})=> {
	console.log(component)
	var proxyPropsObjHasFunction= Object.keys(props).some((key)=>typeof props[key] == "function");
	const getLicenseProfileCheck=(componentProps,currentPermission,currentLicense)=>{
				var permissionCheckWithProfile=permissionCheck(currentPermission);
				var licenseSuccess = licenseCheck(currentLicense)(component.license);
				var permissionSuccess = permissionCheckWithProfile(component.permission);
				var permissionProps=Object.keys(props).reduce((res,next)=>{
					if(props[next] instanceof Array){
						res[next]=props[next].map((permissionObj,i)=>{
						if(permissionCheckWithProfile(permissionObj.permission)){
							return permissionObj.obj;
						}
					}).filter((permission)=>permission);
					return res;
				}
				else if(typeof props[next] == "function"){
					permissionObj=props[next](componentProps);
					console.log("fun",permissionCheckWithProfile(permissionObj.permission));
					if(permissionCheckWithProfile(permissionObj.permission)){
						res[next]=permissionObj.obj;
					}else if(permissionObj.falseObj){
							res[next]=permissionObj.falseObj;
					}
					return res;
				}
				else{
					var permissionObj=props[next];
					if(permissionCheckWithProfile(permissionObj.permission)){
						 res[next]=permissionObj.obj;
					}
					else{
						res[next]=permissionObj.falseObj;
					}
					return res;
				}
			},{});
			 return {licenseSuccess,permissionSuccess,permissionProps}
		}
  
  return (Component)=>
  {

    class HigherOrderPermission extends React.Component{
    	constructor(props,context) {
    		super(props,context);
    		this.currentPermission = props.permission || context.permission;
    		this.currentLicense = props.license || context.license;	
    	}
      	render(){
      		var props = proxyPropsObjHasFunction ? this.props:{};
      		var { licenseSuccess, permissionSuccess, permissionProps } = getLicenseProfileCheck(props,this.currentPermission,this.currentLicense);
      		console.log(permissionSuccess,licenseSuccess,permissionProps,Component)
	        if(licenseSuccess && permissionSuccess){
	          return <Component  {...this.props} {...permissionProps}/>
	        }else if(Fallback){
	          return <Fallback {...this.props}/>
	        }
	        else{	
	          return null;
	        }
      }
    }
    HigherOrderPermission.contextTypes= {
      store:React.PropTypes.object,
      permission:React.PropTypes.object
    }
    return  HigherOrderPermission;
  }
}

export const urlLicensePermissionCheckHOC=(ob)=>{
	ob.Fallback=InsufficientPrivileges;
	return licensePermissionCheckHOC(ob);
}