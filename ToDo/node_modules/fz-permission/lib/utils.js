"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var underScoreSplit = exports.underScoreSplit = function underScoreSplit(str) {
    return str.split('_');
};
var permissionCheck = exports.permissionCheck = function permissionCheck(permissionApi) {
    return function (modulePermission) {
        var success = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var failure = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        var _underScoreSplit = underScoreSplit(modulePermission || "*"),
            _underScoreSplit2 = _slicedToArray(_underScoreSplit, 2),
            module = _underScoreSplit2[0],
            permission = _underScoreSplit2[1];

        console.log(permissionApi, module, permission);
        if (module == "*" && typeof permission == "undefined") return success;

        if (permissionApi[module]) {

            var validation = permissionApi[module][permission] ? permissionApi[module][permission] : permissionApi[module].flags && permissionApi[module].flags[permission] ? permissionApi[module].flags[permission] : false;
            if (validation) {
                return success;
            } else {
                return failure;
            }
        } else {
            var validation = permissionApi.flags && permissionApi.flags[permission] || null;
            if (validation) {
                return success;
            } else {
                return failure;
            }
        }
    };
};
var licenseCheck = exports.licenseCheck = function licenseCheck(licenseApi) {
    return function (license) {
        var success = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var failure = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (license == "*") {
            return success;
        }
        if (licenseApi[license]) {
            return success;
        } else {
            return failure;
        }
    };
};