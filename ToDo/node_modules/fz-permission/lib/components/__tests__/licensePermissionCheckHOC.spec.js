'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _fzI18n = require('fz-i18n');

var _reactTestRenderer = require('react-test-renderer');

var _reactTestRenderer2 = _interopRequireDefault(_reactTestRenderer);

var _licensePermissionCheckHOC = require('../licensePermissionCheckHOC');

var _reduxMockStore = require('redux-mock-store');

var _reduxMockStore2 = _interopRequireDefault(_reduxMockStore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var permission = {
	ticket: {
		create: true,
		view: true
	},
	flags: {
		administratorDashboard: true
	}
};
describe("licensePermissionCheckHOC", function () {
	it("test1", function () {
		var Temp = function Temp() {
			return _react2.default.createElement(
				'div',
				null,
				'Test'
			);
		};
		Temp = (0, _licensePermissionCheckHOC.licensePermissionCheckHOC)({ component: { license: "*", permission: "ticket_view" } })(Temp);

		var ele = _reactTestRenderer2.default.create(_react2.default.createElement(
			_fzI18n.AppProvider,
			{ store: (0, _reduxMockStore2.default)()({}), permission: permission,
				user: { id: "1", name: "vimal" }, timeZone: 'Asia/kolkata' },
			_react2.default.createElement(Temp, null)
		));
		var tree = ele.toJSON();
		expect(tree).toMatchSnapshot();
	});
	fit("test2", function () {
		var Temp = function Temp(_ref) {
			var data = _ref.data;
			return _react2.default.createElement(
				'div',
				null,
				data
			);
		};
		Temp = (0, _licensePermissionCheckHOC.licensePermissionCheckHOC)({
			props: {
				agents: function agents(props) {
					return {
						permission: "*_administratorDashboard",
						obj: props.data,
						falseObj: null
					};
				}
			}
		})(Temp);

		var ele = _reactTestRenderer2.default.create(_react2.default.createElement(
			_fzI18n.AppProvider,
			{ store: (0, _reduxMockStore2.default)()({}), permission: permission,
				user: { id: "1", name: "vimal" }, timeZone: 'Asia/kolkata' },
			_react2.default.createElement(Temp, { data: 'vimal' })
		));
		var tree = ele.toJSON();
		expect(tree).toMatchSnapshot();
	});
});