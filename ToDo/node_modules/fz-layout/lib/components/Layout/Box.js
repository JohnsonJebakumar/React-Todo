'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBoxProps = getBoxProps;
exports.default = Box;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Layout = require('./Layout.css');

var _Layout2 = _interopRequireDefault(_Layout);

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propTypes = {
  shrink: _propTypes2.default.bool,
  flexible: _propTypes2.default.bool,
  scroll: _propTypes2.default.string,
  children: _propTypes2.default.node,
  tagName: _propTypes2.default.string,
  eleRef: _propTypes2.default.func,
  className: _propTypes2.default.string,
  hidden: _propTypes2.default.array
};
function getBoxClassNames(props) {
  var modificators = [props.className];
  var hidden = props.hidden;
  if (props.flexible) {
    modificators.push((0, _utils.getClass)(_Layout2.default, 'grow'));
    modificators.push((0, _utils.getClass)(_Layout2.default, 'basis'));
  }
  if (!props.shrink) {
    modificators.push((0, _utils.getClass)(_Layout2.default, 'shrink'));
  }
  if (hidden) {
    hidden.forEach(function (key) {
      modificators.push((0, _utils.getClass)(_Layout2.default, 'hidden-screen-' + key));
    });
  }
  if (props.scroll) {
    var scroll = props.scroll;
    switch (scroll) {
      case 'horizontal':
        {
          modificators.push((0, _utils.getClass)(_Layout2.default, 'scrollx'));
          break;
        }
      case 'vertical':
        {
          modificators.push((0, _utils.getClass)(_Layout2.default, 'scrolly'));
          break;
        }
      case 'both':
        {
          modificators.push((0, _utils.getClass)(_Layout2.default, 'scrollboth'));
          break;
        }
      case 'none':
        {
          modificators.push((0, _utils.getClass)(_Layout2.default, 'scrollnone'));
          break;
        }
    }
  }
  return modificators;
}

function getBoxProps(props) {
  return (0, _utils.createProps)(propTypes, props, getBoxClassNames(props));
}

function Box(props) {
  var childProps = getBoxProps(props);
  if (props.eleRef) {
    childProps.ref = props.eleRef;
  }
  return _react2.default.createElement(props.tagName || 'div', childProps);
}

Box.propTypes = propTypes;