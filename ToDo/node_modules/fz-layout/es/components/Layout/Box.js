import React from 'react';
import PropTypes from 'prop-types';
import style from './Layout.css';
import { createProps, getClass } from '../../utils';

var propTypes = {
  shrink: PropTypes.bool,
  flexible: PropTypes.bool,
  scroll: PropTypes.string,
  children: PropTypes.node,
  tagName: PropTypes.string,
  eleRef: PropTypes.func,
  className: PropTypes.string,
  hidden: PropTypes.array
};
function getBoxClassNames(props) {
  var modificators = [props.className];
  var hidden = props.hidden;
  if (props.flexible) {
    modificators.push(getClass(style, 'grow'));
    modificators.push(getClass(style, 'basis'));
  }
  if (!props.shrink) {
    modificators.push(getClass(style, 'shrink'));
  }
  if (hidden) {
    hidden.forEach(function (key) {
      modificators.push(getClass(style, 'hidden-screen-' + key));
    });
  }
  if (props.scroll) {
    var scroll = props.scroll;
    switch (scroll) {
      case 'horizontal':
        {
          modificators.push(getClass(style, 'scrollx'));
          break;
        }
      case 'vertical':
        {
          modificators.push(getClass(style, 'scrolly'));
          break;
        }
      case 'both':
        {
          modificators.push(getClass(style, 'scrollboth'));
          break;
        }
      case 'none':
        {
          modificators.push(getClass(style, 'scrollnone'));
          break;
        }
    }
  }
  return modificators;
}

export function getBoxProps(props) {
  return createProps(propTypes, props, getBoxClassNames(props));
}

export default function Box(props) {
  var childProps = getBoxProps(props);
  if (props.eleRef) {
    childProps.ref = props.eleRef;
  }
  return React.createElement(props.tagName || 'div', childProps);
}

Box.propTypes = propTypes;