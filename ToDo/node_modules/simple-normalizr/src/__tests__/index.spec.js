'use strict';

var should = require('chai').should(),
  isEqual = require('lodash/isEqual'),
  isObject = require('lodash/isObject'),
  map = require('lodash/map'),
  merge = require('lodash/merge'),
  expect = require('chai').expect,
  normalizr = require('../index');
var normalize = normalizr.normalize;
var schema = normalizr.schema;
var arrayOf = normalizr.arrayOf;
var contact = new schema('contacts');
var account = new schema('accounts');
var ticket = new schema('tickets');
var util = require('util');
var log = obj => {
  console.log(util.inspect(obj, false, null));
};
function mockObj(nokey) {
  var newObj = {};
  for (var i = 0; i < nokey; i++) {
    newObj['key' + i] = 'test' + i;
  }
  newObj['id'] = Math.random(100) + '';
  return newObj;
}
var ticketObj = {};
var i;
var arrObj = [];
for (i = 0; i < 1000; i++) {
  ticketObj = mockObj(25);
  ticketObj['contact'] = mockObj(30);
  ticketObj['contact']['account'] = mockObj(1000);
  arrObj.push(ticketObj);
}
var categoriesRes = {
  data: [
    {
      level: '1',
      articlesCount: '0',
      id: '12878000000083106',
      name: 'reactImpl',
      parentCategoryId: null,
      permalink: 'reactimpl',
      articleviewtype: 'LISTVIEW',
      child: [
        {
          level: '2',
          articlesCount: '1',
          id: '12878000000706018',
          name: 'dsf',
          parentCategoryId: '12878000000083106',
          permalink: 'dsf',
          articleviewtype: 'LISTVIEW',
          child: [
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000708094',
              name: 'dsfdsfdsfds',
              parentCategoryId: '12878000000706018',
              permalink: 'dsfdsfdsfds',
              articleviewtype: 'LISTVIEW',
              child: [],
              departmentId: '12878000000006907'
            }
          ],
          departmentId: '12878000000006907'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000706024',
          name: 'dsfssd',
          parentCategoryId: '12878000000083106',
          permalink: 'dsfssd',
          articleviewtype: 'LISTVIEW',
          child: [],
          departmentId: '12878000000006907'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000083109',
          name: 'General',
          parentCategoryId: '12878000000083106',
          permalink: 'general-1',
          articleviewtype: 'LISTVIEW',
          child: [
            {
              level: '3',
              articlesCount: '5',
              id: '12878000000572018',
              name: 'dsds',
              parentCategoryId: '12878000000083109',
              permalink: 'dsds-1',
              articleviewtype: 'LISTVIEW',
              child: [],
              departmentId: '12878000000006907'
            },
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000284627',
              name: 'general123',
              parentCategoryId: '12878000000083109',
              permalink: 'general123',
              articleviewtype: 'LISTVIEW',
              child: [
                {
                  level: '4',
                  articlesCount: '0',
                  id: '12878000000706015',
                  name: 'sfd',
                  parentCategoryId: '12878000000284627',
                  permalink: 'sfd',
                  articleviewtype: 'LISTVIEW',
                  child: [],
                  departmentId: '12878000000006907'
                },
                {
                  level: '4',
                  articlesCount: '10',
                  id: '12878000000304047',
                  name: 'test',
                  parentCategoryId: '12878000000284627',
                  permalink: 'test',
                  articleviewtype: 'LISTVIEW',
                  child: [],
                  departmentId: '12878000000006907'
                }
              ],
              departmentId: '12878000000006907'
            },
            {
              level: '3',
              articlesCount: '2',
              id: '12878000000284624',
              name: 'genral',
              parentCategoryId: '12878000000083109',
              permalink: 'genral',
              articleviewtype: 'LISTVIEW',
              child: [
                {
                  level: '4',
                  articlesCount: '0',
                  id: '12878000000439005',
                  name: 'haiiii',
                  parentCategoryId: '12878000000284624',
                  permalink: 'haiiii',
                  articleviewtype: 'LISTVIEW',
                  child: [],
                  departmentId: '12878000000006907'
                },
                {
                  level: '4',
                  articlesCount: '3',
                  id: '12878000000304050',
                  name: 'test12',
                  parentCategoryId: '12878000000284624',
                  permalink: 'test12',
                  articleviewtype: 'LISTVIEW',
                  child: [],
                  departmentId: '12878000000006907'
                }
              ],
              departmentId: '12878000000006907'
            },
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000706012',
              name: 'sdfdsd',
              parentCategoryId: '12878000000083109',
              permalink: 'sdfdsd-1',
              articleviewtype: 'LISTVIEW',
              child: [],
              departmentId: '12878000000006907'
            },
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000706027',
              name: 'sdfdsd',
              parentCategoryId: '12878000000083109',
              permalink: 'sdfdsd',
              articleviewtype: 'LISTVIEW',
              child: [],
              departmentId: '12878000000006907'
            }
          ],
          departmentId: '12878000000006907'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000710004',
          name: 'klkj',
          parentCategoryId: '12878000000083106',
          permalink: 'klkj',
          articleviewtype: 'LISTVIEW',
          child: [],
          departmentId: '12878000000006907'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000708099',
          name: 'kumaresan Samples',
          parentCategoryId: '12878000000083106',
          permalink: 'kumaresan-samples',
          articleviewtype: 'LISTVIEW',
          child: [
            {
              level: '3',
              articlesCount: '2',
              id: '12878000000708102',
              name: 'ssdfdsfds',
              parentCategoryId: '12878000000708099',
              permalink: 'ssdfdsfds',
              articleviewtype: 'LISTVIEW',
              child: [],
              departmentId: '12878000000006907'
            }
          ],
          departmentId: '12878000000006907'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000706021',
          name: 'safd',
          parentCategoryId: '12878000000083106',
          permalink: 'safd',
          articleviewtype: 'LISTVIEW',
          child: [],
          departmentId: '12878000000006907'
        },
        {
          level: '2',
          articlesCount: '125',
          id: '12878000000284630',
          name: 'sample',
          parentCategoryId: '12878000000083106',
          permalink: 'sample',
          articleviewtype: 'LISTVIEW',
          child: [],
          departmentId: '12878000000006907'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000706001',
          name: 'sdfds',
          parentCategoryId: '12878000000083106',
          permalink: 'sdfds',
          articleviewtype: 'LISTVIEW',
          child: [
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000706030',
              name: 'ddsfdsfds',
              parentCategoryId: '12878000000706001',
              permalink: 'ddsfdsfds',
              articleviewtype: 'LISTVIEW',
              child: [],
              departmentId: '12878000000006907'
            }
          ],
          departmentId: '12878000000006907'
        }
      ],
      departmentId: '12878000000006907'
    },
    {
      level: '1',
      articlesCount: '0',
      id: '12878000000158018',
      name: 'react1sdfddsfds',
      parentCategoryId: null,
      permalink: 'react1sdfddsfds',
      articleviewtype: 'OVERVIEW',
      child: [
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000252145',
          name: 'daiii sombu',
          parentCategoryId: '12878000000158018',
          permalink: 'daiii-sombu',
          articleviewtype: 'OVERVIEW',
          child: [
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000321001',
              name: 'NewSection',
              parentCategoryId: '12878000000252145',
              permalink: 'newsection',
              articleviewtype: 'OVERVIEW',
              child: [],
              departmentId: '12878000000091980'
            }
          ],
          departmentId: '12878000000091980'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000158021',
          name: 'General',
          parentCategoryId: '12878000000158018',
          permalink: 'general-1',
          articleviewtype: 'OVERVIEW',
          child: [
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000321004',
              name: 'NewSecti',
              parentCategoryId: '12878000000158021',
              permalink: 'newsecti',
              articleviewtype: 'OVERVIEW',
              child: [
                {
                  level: '4',
                  articlesCount: '1',
                  id: '12878000000487030',
                  name: 'Bruce',
                  parentCategoryId: '12878000000321004',
                  permalink: 'bruce',
                  articleviewtype: 'OVERVIEW',
                  child: [],
                  departmentId: '12878000000091980'
                }
              ],
              departmentId: '12878000000091980'
            },
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000487082',
              name: 'React',
              parentCategoryId: '12878000000158021',
              permalink: 'react',
              articleviewtype: 'OVERVIEW',
              child: [],
              departmentId: '12878000000091980'
            }
          ],
          departmentId: '12878000000091980'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000708076',
          name: 'sdds',
          parentCategoryId: '12878000000158018',
          permalink: 'sdds',
          articleviewtype: 'OVERVIEW',
          child: [],
          departmentId: '12878000000091980'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000708070',
          name: 'sdfddsfds',
          parentCategoryId: '12878000000158018',
          permalink: 'sdfddsfds',
          articleviewtype: 'OVERVIEW',
          child: [
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000708079',
              name: 'sdfdds',
              parentCategoryId: '12878000000708070',
              permalink: 'sdfdds',
              articleviewtype: 'OVERVIEW',
              child: [],
              departmentId: '12878000000091980'
            }
          ],
          departmentId: '12878000000091980'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000708067',
          name: 'sdfdsfds',
          parentCategoryId: '12878000000158018',
          permalink: 'sdfdsfds',
          articleviewtype: 'OVERVIEW',
          child: [
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000708129',
              name: 'Sample sdhfds',
              parentCategoryId: '12878000000708067',
              permalink: 'sample-sdhfds',
              articleviewtype: 'OVERVIEW',
              child: [],
              departmentId: '12878000000091980'
            },
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000708073',
              name: 'sdfsdfds',
              parentCategoryId: '12878000000708067',
              permalink: 'sdfsdfds',
              articleviewtype: 'OVERVIEW',
              child: [],
              departmentId: '12878000000091980'
            }
          ],
          departmentId: '12878000000091980'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000708123',
          name: 'sfsd',
          parentCategoryId: '12878000000158018',
          permalink: 'sfsd',
          articleviewtype: 'OVERVIEW',
          child: [],
          departmentId: '12878000000091980'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000708046',
          name: 'sfsdfsd',
          parentCategoryId: '12878000000158018',
          permalink: 'sfsdfsd',
          articleviewtype: 'OVERVIEW',
          child: [
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000708064',
              name: 'dsfds',
              parentCategoryId: '12878000000708046',
              permalink: 'dsfds',
              articleviewtype: 'OVERVIEW',
              child: [],
              departmentId: '12878000000091980'
            }
          ],
          departmentId: '12878000000091980'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000708049',
          name: 'Smaple',
          parentCategoryId: '12878000000158018',
          permalink: 'smaple',
          articleviewtype: 'OVERVIEW',
          child: [
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000708052',
              name: 'ddsfsd',
              parentCategoryId: '12878000000708049',
              permalink: 'ddsfsd',
              articleviewtype: 'OVERVIEW',
              child: [
                {
                  level: '4',
                  articlesCount: '0',
                  id: '12878000000708117',
                  name: 'kjhhjjhk',
                  parentCategoryId: '12878000000708052',
                  permalink: 'kjhhjjhk',
                  articleviewtype: 'OVERVIEW',
                  child: [],
                  departmentId: '12878000000091980'
                }
              ],
              departmentId: '12878000000091980'
            }
          ],
          departmentId: '12878000000091980'
        }
      ],
      departmentId: '12878000000091980'
    },
    {
      level: '1',
      articlesCount: '0',
      id: '12878000000173083',
      name: 'maheshReact',
      parentCategoryId: null,
      permalink: 'maheshreact',
      articleviewtype: 'LISTVIEW',
      child: [
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000173086',
          name: 'General12345',
          parentCategoryId: '12878000000173083',
          permalink: 'general12345',
          articleviewtype: 'LISTVIEW',
          child: [],
          departmentId: '12878000000171045'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000717155',
          name: 'dsfsd',
          parentCategoryId: '12878000000173083',
          permalink: 'dsfsd-1',
          articleviewtype: 'LISTVIEW',
          child: [
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000727002',
              name: 'dsfds',
              parentCategoryId: '12878000000717155',
              permalink: 'dsfds',
              articleviewtype: 'LISTVIEW',
              child: [],
              departmentId: '12878000000171045'
            },
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000717158',
              name: 'sdfd',
              parentCategoryId: '12878000000717155',
              permalink: 'sdfd',
              articleviewtype: 'LISTVIEW',
              child: [],
              departmentId: '12878000000171045'
            }
          ],
          departmentId: '12878000000171045'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000496175',
          name: 'zoho desk',
          parentCategoryId: '12878000000173083',
          permalink: 'zoho-desk',
          articleviewtype: 'LISTVIEW',
          child: [
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000496178',
              name: 'add section',
              parentCategoryId: '12878000000496175',
              permalink: 'add-section',
              articleviewtype: 'LISTVIEW',
              child: [
                {
                  level: '4',
                  articlesCount: '1',
                  id: '12878000000503071',
                  name: 'aalan',
                  parentCategoryId: '12878000000496178',
                  permalink: 'aalan',
                  articleviewtype: 'LISTVIEW',
                  child: [],
                  departmentId: '12878000000171045'
                }
              ],
              departmentId: '12878000000171045'
            },
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000496181',
              name: 'haii',
              parentCategoryId: '12878000000496175',
              permalink: 'haii',
              articleviewtype: 'LISTVIEW',
              child: [],
              departmentId: '12878000000171045'
            }
          ],
          departmentId: '12878000000171045'
        }
      ],
      departmentId: '12878000000171045'
    },
    {
      level: '1',
      articlesCount: '0',
      id: '12878000000249929',
      name: 'MaheshReactTeamdsfdss',
      parentCategoryId: null,
      permalink: 'maheshreactteamdsfdss',
      articleviewtype: 'LISTVIEW',
      child: [
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000726004',
          name: 'kllkl',
          parentCategoryId: '12878000000249929',
          permalink: 'kllkl',
          articleviewtype: 'LISTVIEW',
          child: [],
          departmentId: '12878000000247891'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000708135',
          name: 'sdfsdfds',
          parentCategoryId: '12878000000249929',
          permalink: 'sdfsdfds',
          articleviewtype: 'LISTVIEW',
          child: [
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000726001',
              name: 'jj',
              parentCategoryId: '12878000000708135',
              permalink: 'jj',
              articleviewtype: 'LISTVIEW',
              child: [
                {
                  level: '4',
                  articlesCount: '0',
                  id: '12878000000726007',
                  name: 'lkkl',
                  parentCategoryId: '12878000000726001',
                  permalink: 'lkkl',
                  articleviewtype: 'LISTVIEW',
                  child: [],
                  departmentId: '12878000000247891'
                }
              ],
              departmentId: '12878000000247891'
            }
          ],
          departmentId: '12878000000247891'
        }
      ],
      departmentId: '12878000000247891'
    },
    {
      level: '1',
      articlesCount: '0',
      id: '12878000000252041',
      name: 'BrucE007',
      parentCategoryId: null,
      permalink: 'bruce007',
      articleviewtype: 'LISTVIEW',
      child: [
        {
          level: '2',
          articlesCount: '1',
          id: '12878000000614003',
          name: 'attachements',
          parentCategoryId: '12878000000252041',
          permalink: 'attachements',
          articleviewtype: 'LISTVIEW',
          child: [],
          departmentId: '12878000000250003'
        }
      ],
      departmentId: '12878000000250003'
    },
    {
      level: '1',
      articlesCount: '0',
      id: '12878000000375199',
      name: 'Marvelous',
      parentCategoryId: null,
      permalink: 'marvelous',
      articleviewtype: 'LISTVIEW',
      child: [
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000496149',
          name: 'Brucesdfds',
          parentCategoryId: '12878000000375199',
          permalink: 'brucesdfds',
          articleviewtype: 'LISTVIEW',
          child: [
            {
              level: '3',
              articlesCount: '0',
              id: '12878000000496167',
              name: 'haii',
              parentCategoryId: '12878000000496149',
              permalink: 'haii',
              articleviewtype: 'LISTVIEW',
              child: [],
              departmentId: '12878000000365161'
            }
          ],
          departmentId: '12878000000365161'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000708026',
          name: 'dsfsd',
          parentCategoryId: '12878000000375199',
          permalink: 'dsfsd',
          articleviewtype: 'LISTVIEW',
          child: [],
          departmentId: '12878000000365161'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000496161',
          name: 'haii',
          parentCategoryId: '12878000000375199',
          permalink: 'haii',
          articleviewtype: 'LISTVIEW',
          child: [],
          departmentId: '12878000000365161'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000708023',
          name: 'Kumaresan',
          parentCategoryId: '12878000000375199',
          permalink: 'kumaresan',
          articleviewtype: 'LISTVIEW',
          child: [],
          departmentId: '12878000000365161'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000496164',
          name: 'react',
          parentCategoryId: '12878000000375199',
          permalink: 'react',
          articleviewtype: 'LISTVIEW',
          child: [],
          departmentId: '12878000000365161'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000708017',
          name: 'sdfsdfsd',
          parentCategoryId: '12878000000375199',
          permalink: 'sdfsdfsd',
          articleviewtype: 'LISTVIEW',
          child: [],
          departmentId: '12878000000365161'
        },
        {
          level: '2',
          articlesCount: '0',
          id: '12878000000708020',
          name: 'sdfsdfsddsfdsfsd',
          parentCategoryId: '12878000000375199',
          permalink: 'sdfsdfsddsfdsfsd',
          articleviewtype: 'LISTVIEW',
          child: [],
          departmentId: '12878000000365161'
        }
      ],
      departmentId: '12878000000365161'
    },
    {
      level: '1',
      articlesCount: '0',
      id: '12878000000598101',
      name: 'portalportal',
      parentCategoryId: null,
      permalink: 'portalportal',
      articleviewtype: 'LISTVIEW',
      child: [],
      departmentId: '12878000000594067'
    }
  ]
};
var categoriesOutput = {
  entities: {
    categories: {
      '12878000000708094': {
        level: '3',
        articlesCount: 0,
        id: '12878000000708094',
        name: 'dsfdsfdsfds',
        parentCategoryId: '12878000000706018',
        permalink: 'dsfdsfdsfds',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000006907'
      },
      '12878000000706015': {
        level: '4',
        articlesCount: '0',
        id: '12878000000706015',
        name: 'sfd',
        parentCategoryId: '12878000000284627',
        permalink: 'sfd',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000006907'
      },
      '12878000000304047': {
        level: '4',
        articlesCount: '10',
        id: '12878000000304047',
        name: 'test',
        parentCategoryId: '12878000000284627',
        permalink: 'test',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000006907'
      },
      '12878000000439005': {
        level: '4',
        articlesCount: '0',
        id: '12878000000439005',
        name: 'haiiii',
        parentCategoryId: '12878000000284624',
        permalink: 'haiiii',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000006907'
      },
      '12878000000304050': {
        level: '4',
        articlesCount: '3',
        id: '12878000000304050',
        name: 'test12',
        parentCategoryId: '12878000000284624',
        permalink: 'test12',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000006907'
      },
      '12878000000572018': {
        level: '3',
        articlesCount: 5,
        id: '12878000000572018',
        name: 'dsds',
        parentCategoryId: '12878000000083109',
        permalink: 'dsds-1',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000006907'
      },
      '12878000000284627': {
        level: '3',
        articlesCount: 10,
        id: '12878000000284627',
        name: 'general123',
        parentCategoryId: '12878000000083109',
        permalink: 'general123',
        articleviewtype: 'LISTVIEW',
        child: ['12878000000706015', '12878000000304047'],
        departmentId: '12878000000006907'
      },
      '12878000000284624': {
        level: '3',
        articlesCount: 5,
        id: '12878000000284624',
        name: 'genral',
        parentCategoryId: '12878000000083109',
        permalink: 'genral',
        articleviewtype: 'LISTVIEW',
        child: ['12878000000439005', '12878000000304050'],
        departmentId: '12878000000006907'
      },
      '12878000000706012': {
        level: '3',
        articlesCount: 0,
        id: '12878000000706012',
        name: 'sdfdsd',
        parentCategoryId: '12878000000083109',
        permalink: 'sdfdsd-1',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000006907'
      },
      '12878000000706027': {
        level: '3',
        articlesCount: 0,
        id: '12878000000706027',
        name: 'sdfdsd',
        parentCategoryId: '12878000000083109',
        permalink: 'sdfdsd',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000006907'
      },
      '12878000000708102': {
        level: '3',
        articlesCount: 2,
        id: '12878000000708102',
        name: 'ssdfdsfds',
        parentCategoryId: '12878000000708099',
        permalink: 'ssdfdsfds',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000006907'
      },
      '12878000000706030': {
        level: '3',
        articlesCount: 0,
        id: '12878000000706030',
        name: 'ddsfdsfds',
        parentCategoryId: '12878000000706001',
        permalink: 'ddsfdsfds',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000006907'
      },
      '12878000000706018': {
        level: '2',
        articlesCount: 1,
        id: '12878000000706018',
        name: 'dsf',
        parentCategoryId: '12878000000083106',
        permalink: 'dsf',
        articleviewtype: 'LISTVIEW',
        child: ['12878000000708094'],
        departmentId: '12878000000006907'
      },
      '12878000000706024': {
        level: '2',
        articlesCount: 0,
        id: '12878000000706024',
        name: 'dsfssd',
        parentCategoryId: '12878000000083106',
        permalink: 'dsfssd',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000006907'
      },
      '12878000000083109': {
        level: '2',
        articlesCount: 20,
        id: '12878000000083109',
        name: 'General',
        parentCategoryId: '12878000000083106',
        permalink: 'general-1',
        articleviewtype: 'LISTVIEW',
        child: [
          '12878000000572018',
          '12878000000284627',
          '12878000000284624',
          '12878000000706012',
          '12878000000706027'
        ],
        departmentId: '12878000000006907'
      },
      '12878000000710004': {
        level: '2',
        articlesCount: 0,
        id: '12878000000710004',
        name: 'klkj',
        parentCategoryId: '12878000000083106',
        permalink: 'klkj',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000006907'
      },
      '12878000000708099': {
        level: '2',
        articlesCount: 2,
        id: '12878000000708099',
        name: 'kumaresan Samples',
        parentCategoryId: '12878000000083106',
        permalink: 'kumaresan-samples',
        articleviewtype: 'LISTVIEW',
        child: ['12878000000708102'],
        departmentId: '12878000000006907'
      },
      '12878000000706021': {
        level: '2',
        articlesCount: 0,
        id: '12878000000706021',
        name: 'safd',
        parentCategoryId: '12878000000083106',
        permalink: 'safd',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000006907'
      },
      '12878000000284630': {
        level: '2',
        articlesCount: 125,
        id: '12878000000284630',
        name: 'sample',
        parentCategoryId: '12878000000083106',
        permalink: 'sample',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000006907'
      },
      '12878000000706001': {
        level: '2',
        articlesCount: 0,
        id: '12878000000706001',
        name: 'sdfds',
        parentCategoryId: '12878000000083106',
        permalink: 'sdfds',
        articleviewtype: 'LISTVIEW',
        child: ['12878000000706030'],
        departmentId: '12878000000006907'
      },
      '12878000000321001': {
        level: '3',
        articlesCount: 0,
        id: '12878000000321001',
        name: 'NewSection',
        parentCategoryId: '12878000000252145',
        permalink: 'newsection',
        articleviewtype: 'OVERVIEW',
        child: [],
        departmentId: '12878000000091980'
      },
      '12878000000487030': {
        level: '4',
        articlesCount: '1',
        id: '12878000000487030',
        name: 'Bruce',
        parentCategoryId: '12878000000321004',
        permalink: 'bruce',
        articleviewtype: 'OVERVIEW',
        child: [],
        departmentId: '12878000000091980'
      },
      '12878000000321004': {
        level: '3',
        articlesCount: 1,
        id: '12878000000321004',
        name: 'NewSecti',
        parentCategoryId: '12878000000158021',
        permalink: 'newsecti',
        articleviewtype: 'OVERVIEW',
        child: ['12878000000487030'],
        departmentId: '12878000000091980'
      },
      '12878000000487082': {
        level: '3',
        articlesCount: 0,
        id: '12878000000487082',
        name: 'React',
        parentCategoryId: '12878000000158021',
        permalink: 'react',
        articleviewtype: 'OVERVIEW',
        child: [],
        departmentId: '12878000000091980'
      },
      '12878000000708079': {
        level: '3',
        articlesCount: 0,
        id: '12878000000708079',
        name: 'sdfdds',
        parentCategoryId: '12878000000708070',
        permalink: 'sdfdds',
        articleviewtype: 'OVERVIEW',
        child: [],
        departmentId: '12878000000091980'
      },
      '12878000000708129': {
        level: '3',
        articlesCount: 0,
        id: '12878000000708129',
        name: 'Sample sdhfds',
        parentCategoryId: '12878000000708067',
        permalink: 'sample-sdhfds',
        articleviewtype: 'OVERVIEW',
        child: [],
        departmentId: '12878000000091980'
      },
      '12878000000708073': {
        level: '3',
        articlesCount: 0,
        id: '12878000000708073',
        name: 'sdfsdfds',
        parentCategoryId: '12878000000708067',
        permalink: 'sdfsdfds',
        articleviewtype: 'OVERVIEW',
        child: [],
        departmentId: '12878000000091980'
      },
      '12878000000708064': {
        level: '3',
        articlesCount: 0,
        id: '12878000000708064',
        name: 'dsfds',
        parentCategoryId: '12878000000708046',
        permalink: 'dsfds',
        articleviewtype: 'OVERVIEW',
        child: [],
        departmentId: '12878000000091980'
      },
      '12878000000708117': {
        level: '4',
        articlesCount: '0',
        id: '12878000000708117',
        name: 'kjhhjjhk',
        parentCategoryId: '12878000000708052',
        permalink: 'kjhhjjhk',
        articleviewtype: 'OVERVIEW',
        child: [],
        departmentId: '12878000000091980'
      },
      '12878000000708052': {
        level: '3',
        articlesCount: 0,
        id: '12878000000708052',
        name: 'ddsfsd',
        parentCategoryId: '12878000000708049',
        permalink: 'ddsfsd',
        articleviewtype: 'OVERVIEW',
        child: ['12878000000708117'],
        departmentId: '12878000000091980'
      },
      '12878000000252145': {
        level: '2',
        articlesCount: 0,
        id: '12878000000252145',
        name: 'daiii sombu',
        parentCategoryId: '12878000000158018',
        permalink: 'daiii-sombu',
        articleviewtype: 'OVERVIEW',
        child: ['12878000000321001'],
        departmentId: '12878000000091980'
      },
      '12878000000158021': {
        level: '2',
        articlesCount: 1,
        id: '12878000000158021',
        name: 'General',
        parentCategoryId: '12878000000158018',
        permalink: 'general-1',
        articleviewtype: 'OVERVIEW',
        child: ['12878000000321004', '12878000000487082'],
        departmentId: '12878000000091980'
      },
      '12878000000708076': {
        level: '2',
        articlesCount: 0,
        id: '12878000000708076',
        name: 'sdds',
        parentCategoryId: '12878000000158018',
        permalink: 'sdds',
        articleviewtype: 'OVERVIEW',
        child: [],
        departmentId: '12878000000091980'
      },
      '12878000000708070': {
        level: '2',
        articlesCount: 0,
        id: '12878000000708070',
        name: 'sdfddsfds',
        parentCategoryId: '12878000000158018',
        permalink: 'sdfddsfds',
        articleviewtype: 'OVERVIEW',
        child: ['12878000000708079'],
        departmentId: '12878000000091980'
      },
      '12878000000708067': {
        level: '2',
        articlesCount: 0,
        id: '12878000000708067',
        name: 'sdfdsfds',
        parentCategoryId: '12878000000158018',
        permalink: 'sdfdsfds',
        articleviewtype: 'OVERVIEW',
        child: ['12878000000708129', '12878000000708073'],
        departmentId: '12878000000091980'
      },
      '12878000000708123': {
        level: '2',
        articlesCount: 0,
        id: '12878000000708123',
        name: 'sfsd',
        parentCategoryId: '12878000000158018',
        permalink: 'sfsd',
        articleviewtype: 'OVERVIEW',
        child: [],
        departmentId: '12878000000091980'
      },
      '12878000000708046': {
        level: '2',
        articlesCount: 0,
        id: '12878000000708046',
        name: 'sfsdfsd',
        parentCategoryId: '12878000000158018',
        permalink: 'sfsdfsd',
        articleviewtype: 'OVERVIEW',
        child: ['12878000000708064'],
        departmentId: '12878000000091980'
      },
      '12878000000708049': {
        level: '2',
        articlesCount: 0,
        id: '12878000000708049',
        name: 'Smaple',
        parentCategoryId: '12878000000158018',
        permalink: 'smaple',
        articleviewtype: 'OVERVIEW',
        child: ['12878000000708052'],
        departmentId: '12878000000091980'
      },
      '12878000000727002': {
        level: '3',
        articlesCount: 0,
        id: '12878000000727002',
        name: 'dsfds',
        parentCategoryId: '12878000000717155',
        permalink: 'dsfds',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000171045'
      },
      '12878000000717158': {
        level: '3',
        articlesCount: 0,
        id: '12878000000717158',
        name: 'sdfd',
        parentCategoryId: '12878000000717155',
        permalink: 'sdfd',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000171045'
      },
      '12878000000503071': {
        level: '4',
        articlesCount: '1',
        id: '12878000000503071',
        name: 'aalan',
        parentCategoryId: '12878000000496178',
        permalink: 'aalan',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000171045'
      },
      '12878000000496178': {
        level: '3',
        articlesCount: 1,
        id: '12878000000496178',
        name: 'add section',
        parentCategoryId: '12878000000496175',
        permalink: 'add-section',
        articleviewtype: 'LISTVIEW',
        child: ['12878000000503071'],
        departmentId: '12878000000171045'
      },
      '12878000000496181': {
        level: '3',
        articlesCount: 0,
        id: '12878000000496181',
        name: 'haii',
        parentCategoryId: '12878000000496175',
        permalink: 'haii',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000171045'
      },
      '12878000000173086': {
        level: '2',
        articlesCount: 0,
        id: '12878000000173086',
        name: 'General12345',
        parentCategoryId: '12878000000173083',
        permalink: 'general12345',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000171045'
      },
      '12878000000717155': {
        level: '2',
        articlesCount: 0,
        id: '12878000000717155',
        name: 'dsfsd',
        parentCategoryId: '12878000000173083',
        permalink: 'dsfsd-1',
        articleviewtype: 'LISTVIEW',
        child: ['12878000000727002', '12878000000717158'],
        departmentId: '12878000000171045'
      },
      '12878000000496175': {
        level: '2',
        articlesCount: 1,
        id: '12878000000496175',
        name: 'zoho desk',
        parentCategoryId: '12878000000173083',
        permalink: 'zoho-desk',
        articleviewtype: 'LISTVIEW',
        child: ['12878000000496178', '12878000000496181'],
        departmentId: '12878000000171045'
      },
      '12878000000726007': {
        level: '4',
        articlesCount: '0',
        id: '12878000000726007',
        name: 'lkkl',
        parentCategoryId: '12878000000726001',
        permalink: 'lkkl',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000247891'
      },
      '12878000000726001': {
        level: '3',
        articlesCount: 0,
        id: '12878000000726001',
        name: 'jj',
        parentCategoryId: '12878000000708135',
        permalink: 'jj',
        articleviewtype: 'LISTVIEW',
        child: ['12878000000726007'],
        departmentId: '12878000000247891'
      },
      '12878000000726004': {
        level: '2',
        articlesCount: 0,
        id: '12878000000726004',
        name: 'kllkl',
        parentCategoryId: '12878000000249929',
        permalink: 'kllkl',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000247891'
      },
      '12878000000708135': {
        level: '2',
        articlesCount: 0,
        id: '12878000000708135',
        name: 'sdfsdfds',
        parentCategoryId: '12878000000249929',
        permalink: 'sdfsdfds',
        articleviewtype: 'LISTVIEW',
        child: ['12878000000726001'],
        departmentId: '12878000000247891'
      },
      '12878000000614003': {
        level: '2',
        articlesCount: 1,
        id: '12878000000614003',
        name: 'attachements',
        parentCategoryId: '12878000000252041',
        permalink: 'attachements',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000250003'
      },
      '12878000000496167': {
        level: '3',
        articlesCount: 0,
        id: '12878000000496167',
        name: 'haii',
        parentCategoryId: '12878000000496149',
        permalink: 'haii',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000365161'
      },
      '12878000000496149': {
        level: '2',
        articlesCount: 0,
        id: '12878000000496149',
        name: 'Brucesdfds',
        parentCategoryId: '12878000000375199',
        permalink: 'brucesdfds',
        articleviewtype: 'LISTVIEW',
        child: ['12878000000496167'],
        departmentId: '12878000000365161'
      },
      '12878000000708026': {
        level: '2',
        articlesCount: 0,
        id: '12878000000708026',
        name: 'dsfsd',
        parentCategoryId: '12878000000375199',
        permalink: 'dsfsd',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000365161'
      },
      '12878000000496161': {
        level: '2',
        articlesCount: 0,
        id: '12878000000496161',
        name: 'haii',
        parentCategoryId: '12878000000375199',
        permalink: 'haii',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000365161'
      },
      '12878000000708023': {
        level: '2',
        articlesCount: 0,
        id: '12878000000708023',
        name: 'Kumaresan',
        parentCategoryId: '12878000000375199',
        permalink: 'kumaresan',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000365161'
      },
      '12878000000496164': {
        level: '2',
        articlesCount: 0,
        id: '12878000000496164',
        name: 'react',
        parentCategoryId: '12878000000375199',
        permalink: 'react',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000365161'
      },
      '12878000000708017': {
        level: '2',
        articlesCount: 0,
        id: '12878000000708017',
        name: 'sdfsdfsd',
        parentCategoryId: '12878000000375199',
        permalink: 'sdfsdfsd',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000365161'
      },
      '12878000000708020': {
        level: '2',
        articlesCount: 0,
        id: '12878000000708020',
        name: 'sdfsdfsddsfdsfsd',
        parentCategoryId: '12878000000375199',
        permalink: 'sdfsdfsddsfdsfsd',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000365161'
      },
      '12878000000083106': {
        level: '1',
        articlesCount: 148,
        id: '12878000000083106',
        name: 'reactImpl',
        parentCategoryId: null,
        permalink: 'reactimpl',
        articleviewtype: 'LISTVIEW',
        child: [
          '12878000000706018',
          '12878000000706024',
          '12878000000083109',
          '12878000000710004',
          '12878000000708099',
          '12878000000706021',
          '12878000000284630',
          '12878000000706001'
        ],
        departmentId: '12878000000006907'
      },
      '12878000000158018': {
        level: '1',
        articlesCount: 1,
        id: '12878000000158018',
        name: 'react1sdfddsfds',
        parentCategoryId: null,
        permalink: 'react1sdfddsfds',
        articleviewtype: 'OVERVIEW',
        child: [
          '12878000000252145',
          '12878000000158021',
          '12878000000708076',
          '12878000000708070',
          '12878000000708067',
          '12878000000708123',
          '12878000000708046',
          '12878000000708049'
        ],
        departmentId: '12878000000091980'
      },
      '12878000000173083': {
        level: '1',
        articlesCount: 1,
        id: '12878000000173083',
        name: 'maheshReact',
        parentCategoryId: null,
        permalink: 'maheshreact',
        articleviewtype: 'LISTVIEW',
        child: ['12878000000173086', '12878000000717155', '12878000000496175'],
        departmentId: '12878000000171045'
      },
      '12878000000249929': {
        level: '1',
        articlesCount: 0,
        id: '12878000000249929',
        name: 'MaheshReactTeamdsfdss',
        parentCategoryId: null,
        permalink: 'maheshreactteamdsfdss',
        articleviewtype: 'LISTVIEW',
        child: ['12878000000726004', '12878000000708135'],
        departmentId: '12878000000247891'
      },
      '12878000000252041': {
        level: '1',
        articlesCount: 1,
        id: '12878000000252041',
        name: 'BrucE007',
        parentCategoryId: null,
        permalink: 'bruce007',
        articleviewtype: 'LISTVIEW',
        child: ['12878000000614003'],
        departmentId: '12878000000250003'
      },
      '12878000000375199': {
        level: '1',
        articlesCount: 0,
        id: '12878000000375199',
        name: 'Marvelous',
        parentCategoryId: null,
        permalink: 'marvelous',
        articleviewtype: 'LISTVIEW',
        child: [
          '12878000000496149',
          '12878000000708026',
          '12878000000496161',
          '12878000000708023',
          '12878000000496164',
          '12878000000708017',
          '12878000000708020'
        ],
        departmentId: '12878000000365161'
      },
      '12878000000598101': {
        level: '1',
        articlesCount: 0,
        id: '12878000000598101',
        name: 'portalportal',
        parentCategoryId: null,
        permalink: 'portalportal',
        articleviewtype: 'LISTVIEW',
        child: [],
        departmentId: '12878000000594067'
      }
    }
  },
  result: [
    '12878000000083106',
    '12878000000158018',
    '12878000000173083',
    '12878000000249929',
    '12878000000252041',
    '12878000000375199',
    '12878000000598101'
  ]
};
const subSectionSchema = schema('categories');
const sectionSchema = schema('categories', {
  mapping: {
    child: arrayOf(subSectionSchema)
  },
  entityAssignment: (obj, entity) => {
    obj.articlesCount = obj.child.reduce((res, id) => {
      return res + parseInt(entity[id].articlesCount);
    }, parseInt(obj.articlesCount));
    return obj;
  }
});

const subCategorySchema = schema('categories', {
  mapping: {
    child: arrayOf(sectionSchema)
  },
  entityAssignment: (obj, entity) => {
    obj.articlesCount = obj.child.reduce((res, id) => {
      return res + parseInt(entity[id].articlesCount);
    }, parseInt(obj.articlesCount));
    return obj;
  }
});
const categorySchema = schema('categories', {
  mapping: {
    child: arrayOf(subCategorySchema)
  },
  entityAssignment: (obj, entity) => {
    obj.articlesCount = obj.child.reduce((res, id) => {
      return res + parseInt(entity[id].articlesCount);
    }, parseInt(obj.articlesCount));
    return obj;
  }
});

describe('normalizr', function() {
  it('category article count', function() {
    normalize(categoriesRes.data, arrayOf(categorySchema)).should.eql(
      categoriesOutput
    );
  });
  it('Simple contact normalize', function() {
    normalize(
      {
        id: 'c1',
        name: 'vimal'
      },
      contact
    ).should.eql({
      entities: {
        contacts: {
          c1: {
            id: 'c1',
            name: 'vimal'
          }
        }
      },
      result: 'c1'
    });
  });
  it('array contacts normalize', function() {
    normalize(
      [
        {
          id: 'c1',
          name: 'vimal1'
        },
        {
          id: 'c2',
          name: 'vimal2'
        }
      ],
      arrayOf(contact)
    ).should.eql({
      entities: {
        contacts: {
          c1: {
            id: 'c1',
            name: 'vimal1'
          },
          c2: {
            id: 'c2',
            name: 'vimal2'
          }
        }
      },
      result: ['c1', 'c2']
    });
  });
  it('Simple assignEntity contact normalize', function() {
    normalize(
      {
        id: 'c1',
        name: 'vimal',
        contact_id: 'c1'
      },
      schema('contacts', {
        entityAssignment: obj => {
          obj['newKey'] = 'vimal';
          delete obj['id'];
          return obj;
        }
      })
    ).should.eql({
      entities: {
        contacts: {
          c1: {
            contact_id: 'c1',
            name: 'vimal',
            newKey: 'vimal'
          }
        }
      },
      result: 'c1'
    });
  });
  it('nested contact and accout normalize', function() {
    normalize(
      {
        id: 'c1',
        name: 'vimal1',
        account: {
          id: 'a1',
          aname: 'account1'
        }
      },
      schema('contacts', {
        mapping: {
          account: account
        }
      })
    ).should.eql({
      entities: {
        contacts: {
          c1: {
            id: 'c1',
            name: 'vimal1',
            account: 'a1'
          }
        },
        accounts: {
          a1: {
            id: 'a1',
            aname: 'account1'
          }
        }
      },
      result: 'c1'
    });
  });
  it('nested contact and accout normalize', function() {
    normalize(
      {
        id: 'c1',
        name: 'vimal1',
        account: {
          id: 'a1',
          aname: 'account1'
        },
        tickets: [
          {
            id: 't1',
            subj: 'ticket1'
          }
        ]
      },
      schema('contacts', {
        mapping: {
          account: account,
          tickets: arrayOf(schema('tickets'))
        }
      })
    ).should.eql({
      entities: {
        contacts: {
          c1: {
            id: 'c1',
            name: 'vimal1',
            account: 'a1',
            tickets: ['t1']
          }
        },
        accounts: {
          a1: {
            id: 'a1',
            aname: 'account1'
          }
        },
        tickets: {
          t1: {
            id: 't1',
            subj: 'ticket1'
          }
        }
      },
      result: 'c1'
    });
  });
  it('nested contact and accout not available normalize', function() {
    normalize(
      {
        id: 'c1',
        name: 'vimal1'
      },
      schema('contacts', {
        mapping: {
          account: account
        }
      })
    ).should.eql({
      entities: {
        contacts: {
          c1: {
            id: 'c1',
            name: 'vimal1'
          }
        }
      },
      result: 'c1'
    });
  });
  it('nested contact and accout null available normalize', function() {
    normalize(
      {
        id: 'c1',
        name: 'vimal1',
        account: null
      },
      schema('contacts', {
        mapping: {
          account: account
        }
      })
    ).should.eql({
      entities: {
        contacts: {
          c1: {
            id: 'c1',
            name: 'vimal1',
            account: null
          }
        }
      },
      result: 'c1'
    });
  });

  it('nested contact and arrayOf accout null available normalize', function() {
    normalize(
      {
        id: 'c1',
        name: 'vimal1',
        account: null
      },
      schema('contacts', {
        mapping: {
          account: arrayOf(account)
        }
      })
    ).should.eql({
      entities: {
        contacts: {
          c1: {
            id: 'c1',
            name: 'vimal1',
            account: null
          }
        }
      },
      result: 'c1'
    });
  });
  it('union', function() {
    normalize(
      [
        {
          id: 'th1',
          name: 'thread1',
          type: 'thread',
          action: 'add'
        },
        {
          id: 'co1',
          name: 'comment1',
          type: 'comment',
          action: 'add'
        },
        {
          id: 'th1',
          type: 'thread',
          action: 'delete'
        }
      ],
      arrayOf(
        schema({
          union: { thread: schema('threads'), comment: schema('comments') },
          key: 'type'
        })
      )
    ).should.eql({
      entities: {
        threads: {
          th1: {
            id: 'th1',
            type: 'thread',
            action: 'delete'
          }
        },
        comments: {
          co1: {
            action: 'add',
            id: 'co1',
            name: 'comment1',
            type: 'comment'
          }
        }
      },
      result: [
        { id: 'th1', type: 'thread' },
        { id: 'co1', type: 'comment' },
        { id: 'th1', type: 'thread' }
      ]
    });
  });

  it('nested contact and arrayOf accout [] available normalize', function() {
    normalize(
      {
        id: 'c1',
        name: 'vimal1',
        account: []
      },
      schema('contacts', {
        mapping: {
          account: arrayOf(account)
        }
      })
    ).should.eql({
      entities: {
        contacts: {
          c1: {
            id: 'c1',
            name: 'vimal1',
            account: []
          }
        },
        accounts: {}
      },
      result: 'c1'
    });
  });
  it('nested contact with tickets normalize', function() {
    normalize(
      {
        id: 'c1',
        name: 'vimal1',
        ticket: [
          { id: 't1', subject: 'ticket1' },
          { id: 't2', subject: 'ticket2' }
        ]
      },
      schema('contacts', { mapping: { ticket: arrayOf(schema('tickets')) } })
    ).should.eql({
      entities: {
        contacts: {
          c1: { id: 'c1', name: 'vimal1', ticket: ['t1', 't2'] }
        },
        tickets: {
          t1: { id: 't1', subject: 'ticket1' },
          t2: { id: 't2', subject: 'ticket2' }
        }
      },
      result: 'c1'
    });
  });
  it('nested contact with tickets normalize map format', function() {
    normalize(
      {
        id: 'c1',
        name: 'vimal1',
        ticket: {
          t1: {
            id: 't1',
            subject: 'ticket1'
          },
          t2: {
            id: 't2',
            subject: 'ticket2'
          }
        }
      },
      schema('contacts', { mapping: { ticket: arrayOf(schema('tickets')) } })
    ).should.eql({
      entities: {
        contacts: {
          c1: {
            id: 'c1',
            name: 'vimal1',
            ticket: {
              t1: 't1',
              t2: 't2'
            }
          }
        },
        tickets: {
          t1: { id: 't1', subject: 'ticket1' },
          t2: { id: 't2', subject: 'ticket2' }
        }
      },
      result: 'c1'
    });
  });
  it('nested contacts with tickets normalize', function() {
    normalize(
      [
        {
          id: 'c1',
          name: 'vimal1',
          ticket: [
            { id: 't1', subject: 'ticket1' },
            { id: 't2', subject: 'ticket2' }
          ]
        },
        {
          id: 'c2',
          name: 'vimal2',
          ticket: [
            { id: 't3', subject: 'ticket3' },
            { id: 't4', subject: 'ticket4' }
          ]
        }
      ],
      arrayOf(
        schema('contacts', { mapping: { ticket: arrayOf(schema('tickets')) } })
      )
    ).should.eql({
      entities: {
        contacts: {
          c1: { id: 'c1', name: 'vimal1', ticket: ['t1', 't2'] },
          c2: { id: 'c2', name: 'vimal2', ticket: ['t3', 't4'] }
        },
        tickets: {
          t1: { id: 't1', subject: 'ticket1' },
          t2: { id: 't2', subject: 'ticket2' },
          t3: { id: 't3', subject: 'ticket3' },
          t4: { id: 't4', subject: 'ticket4' }
        }
      },
      result: ['c1', 'c2']
    });
  });
  it('nested contacts with account normalize', function() {
    normalize(
      [
        {
          id: 'c1',
          name: 'vimal1',
          account: { id: 'a1', aname: 'account1' }
        },
        {
          id: 'c2',
          name: 'vimal2',
          account: { id: 'a2', aname: 'account2' }
        }
      ],
      arrayOf(schema('contacts', { mapping: { account: schema('accounts') } }))
    ).should.eql({
      entities: {
        contacts: {
          c1: { id: 'c1', name: 'vimal1', account: 'a1' },
          c2: { id: 'c2', name: 'vimal2', account: 'a2' }
        },
        accounts: {
          a1: { id: 'a1', aname: 'account1' },
          a2: { id: 'a2', aname: 'account2' }
        }
      },
      result: ['c1', 'c2']
    });
  });
  it('nested ticket contact with account normalize', function() {
    normalize(
      {
        id: 't1',
        subject: 'ticket1',
        contact: {
          id: 'c1',
          name: 'vimal1',
          account: { id: 'a1', aname: 'account1' }
        }
      },
      schema('tickets', {
        mapping: {
          contact: schema('contacts', {
            mapping: { account: schema('accounts') }
          })
        }
      })
    ).should.eql({
      entities: {
        tickets: {
          t1: { id: 't1', subject: 'ticket1', contact: 'c1' }
        },
        contacts: {
          c1: { id: 'c1', name: 'vimal1', account: 'a1' }
        },
        accounts: {
          a1: { id: 'a1', aname: 'account1' }
        }
      },
      result: 't1'
    });
  });

  it('nested stress test ticket contact with account normalize nano second', function() {
    var startTime = process.hrtime()[1];
    //console.log(ticketObj);
    var a = normalize(
      ticketObj,
      schema('ticket', {
        mapping: {
          contact: schema('contacts', {
            mapping: { account: schema('accounts') }
          })
        }
      })
    );
    var endTime = process.hrtime()[1];
    var timeTaken = endTime - startTime;
    //console.log(timeTaken)
    expect(timeTaken < 1000000).to.equal(true);
    //console.log(a.entities)
  });
  it('union simple normalize', function() {
    normalize(
      {
        id: 'th1',
        name: 'thread1',
        type: 'thread'
      },
      schema({
        union: { thread: schema('threads'), comment: schema('comments') },
        key: 'type'
      })
    ).should.eql({
      entities: {
        threads: {
          th1: { id: 'th1', name: 'thread1', type: 'thread' }
        }
      },
      result: { id: 'th1', type: 'thread' }
    });
  });
  it('union array normalize', function() {
    normalize(
      [
        {
          id: 'th1',
          name: 'thread1',
          type: 'thread'
        },
        {
          id: 'co1',
          name: 'comment1',
          type: 'comment'
        }
      ],
      arrayOf(
        schema({
          union: { thread: schema('threads'), comment: schema('comments') },
          key: 'type'
        })
      )
    ).should.eql({
      entities: {
        threads: {
          th1: { id: 'th1', name: 'thread1', type: 'thread' }
        },
        comments: {
          co1: { id: 'co1', name: 'comment1', type: 'comment' }
        }
      },
      result: [{ id: 'th1', type: 'thread' }, { id: 'co1', type: 'comment' }]
    });
  });
  it('union ticket with array conversation normalize', function() {
    normalize(
      {
        id: 't1',
        subject: 'ticket',
        conversation: [
          {
            id: 'th1',
            name: 'thread1',
            type: 'thread'
          },
          {
            id: 'co1',
            name: 'comment1',
            type: 'comment'
          }
        ]
      },
      schema('tickets', {
        mapping: {
          conversation: arrayOf(
            schema({
              union: { thread: schema('threads'), comment: schema('comments') },
              key: 'type'
            })
          )
        }
      })
    ).should.eql({
      entities: {
        tickets: {
          t1: {
            id: 't1',
            subject: 'ticket',
            conversation: [
              { id: 'th1', type: 'thread' },
              { id: 'co1', type: 'comment' }
            ]
          }
        },
        threads: {
          th1: { id: 'th1', name: 'thread1', type: 'thread' }
        },
        comments: {
          co1: { id: 'co1', name: 'comment1', type: 'comment' }
        }
      },
      result: 't1'
    });
  });

  it('union tickets with array conversation normalize', function() {
    normalize(
      [
        {
          id: 't1',
          subject: 'ticket',
          conversation: [
            {
              id: 'th1',
              name: 'thread1',
              type: 'thread'
            },
            {
              id: 'co1',
              name: 'comment1',
              type: 'comment'
            }
          ]
        },
        {
          id: 't2',
          subject: 'ticket2',
          conversation: [
            {
              id: 'th2',
              name: 'thread2',
              type: 'thread'
            },
            {
              id: 'co2',
              name: 'comment2',
              type: 'comment'
            }
          ]
        }
      ],
      arrayOf(
        schema('tickets', {
          mapping: {
            conversation: arrayOf(
              schema({
                union: {
                  thread: schema('threads'),
                  comment: schema('comments')
                },
                key: 'type'
              })
            )
          }
        })
      )
    ).should.eql({
      entities: {
        tickets: {
          t1: {
            id: 't1',
            subject: 'ticket',
            conversation: [
              { id: 'th1', type: 'thread' },
              { id: 'co1', type: 'comment' }
            ]
          },
          t2: {
            id: 't2',
            subject: 'ticket2',
            conversation: [
              { id: 'th2', type: 'thread' },
              { id: 'co2', type: 'comment' }
            ]
          }
        },
        threads: {
          th1: { id: 'th1', name: 'thread1', type: 'thread' },
          th2: { id: 'th2', name: 'thread2', type: 'thread' }
        },
        comments: {
          co1: { id: 'co1', name: 'comment1', type: 'comment' },
          co2: { id: 'co2', name: 'comment2', type: 'comment' }
        }
      },
      result: ['t1', 't2']
    });
  });
  it('union nested', function() {
    normalize(
      [
        {
          id: 't1',
          subject: 'ticket',
          conversation: [
            {
              id: 'th1',
              name: 'thread1',
              type: 'thread'
            },
            {
              id: 'co1',
              name: 'comment1',
              type: 'comment',
              attachment: [
                {
                  id: 'a1',
                  name: 'att1'
                },
                {
                  id: 'a2',
                  name: 'att1'
                }
              ]
            }
          ]
        },
        {
          id: 't2',
          subject: 'ticket2',
          conversation: [
            {
              id: 'th2',
              name: 'thread2',
              type: 'thread'
            },
            {
              id: 'co2',
              name: 'comment2',
              type: 'comment'
            }
          ]
        }
      ],
      arrayOf(
        schema('tickets', {
          mapping: {
            conversation: arrayOf(
              schema({
                union: {
                  thread: schema('threads'),
                  comment: schema('comments', {
                    mapping: { attachment: arrayOf(schema('attachment')) }
                  })
                },
                key: 'type'
              })
            )
          }
        })
      )
    ).should.eql({
      entities: {
        tickets: {
          t1: {
            id: 't1',
            subject: 'ticket',
            conversation: [
              { id: 'th1', type: 'thread' },
              { id: 'co1', type: 'comment' }
            ]
          },
          t2: {
            id: 't2',
            subject: 'ticket2',
            conversation: [
              { id: 'th2', type: 'thread' },
              { id: 'co2', type: 'comment' }
            ]
          }
        },
        threads: {
          th1: { id: 'th1', name: 'thread1', type: 'thread' },
          th2: { id: 'th2', name: 'thread2', type: 'thread' }
        },
        comments: {
          co1: {
            id: 'co1',
            name: 'comment1',
            type: 'comment',
            attachment: ['a1', 'a2']
          },
          co2: { id: 'co2', name: 'comment2', type: 'comment' }
        },
        attachment: {
          a1: {
            id: 'a1',
            name: 'att1'
          },
          a2: {
            id: 'a2',
            name: 'att1'
          }
        }
      },
      result: ['t1', 't2']
    });
  });

  it('array union nested ', function() {
    normalize(
      [
        {
          id: 'th1',
          name: 'thread1',
          type: 'thread'
        },
        {
          id: 'co1',
          name: 'comment1',
          type: 'comment',
          attachment: [
            {
              id: 'a1',
              name: 'att1'
            },
            {
              id: 'a2',
              name: 'att1'
            }
          ]
        }
      ],
      arrayOf(
        schema({
          union: {
            thread: schema('threads', {
              mapping: {
                attachment: arrayOf(schema('attachment'))
              }
            }),
            comment: schema('comments', {
              mapping: {
                attachment: arrayOf(schema('attachment'))
              }
            })
          },
          key: 'type'
        })
      )
    ).should.eql({
      entities: {
        threads: {
          th1: { id: 'th1', name: 'thread1', type: 'thread' }
        },
        comments: {
          co1: {
            id: 'co1',
            name: 'comment1',
            type: 'comment',
            attachment: ['a1', 'a2']
          }
        },
        attachment: {
          a1: {
            id: 'a1',
            name: 'att1'
          },
          a2: {
            id: 'a2',
            name: 'att1'
          }
        }
      },
      result: [
        {
          id: 'th1',
          type: 'thread'
        },
        {
          id: 'co1',
          type: 'comment'
        }
      ]
    });
    log(
      arrayOf(
        schema({
          union: {
            thread: schema('threads', {
              mapping: {
                attachment: arrayOf(schema('attachment'))
              }
            }),
            comment: schema('comments', {
              mapping: {
                attachments: arrayOf(schema('attachments'))
              }
            })
          },
          key: 'type'
        })
      )
    );
  });
  it('Simple nested entity not direct key normalize', function() {
    normalize(
      {
        id: 'c1',
        name: 'vimal',
        test: { account: { id: 'a1', aname: 'account1' }, other: 'otherdata' }
      },
      schema('contacts', { mapping: { 'test.account': schema('accounts') } })
    ).should.eql({
      entities: {
        contacts: {
          c1: {
            id: 'c1',
            name: 'vimal',
            test: {
              account: 'a1',
              other: 'otherdata'
            }
          }
        },
        accounts: {
          a1: {
            id: 'a1',
            aname: 'account1'
          }
        }
      },
      result: 'c1'
    });
  });

  //  });

  /*it('Simple contact with extra id normalize', function () {

  normalize({id:"c1",name:"vimal"},Object.assign({},schema('contacts'),{extraId:(obj)=>({name:obj.name})}) ).should.eql(
    {entities:{"contacts":{"c1":{id:"c1",name:"vimal"}}},result:{ id:"c1",name:"vimal"}}
  );
});
it('array contacts with extra id normalize', function () {
  normalize([{id:"c1",name:"vimal1"},{id:"c2",name:"vimal2"}],arrayOf(Object.assign({},schema('contacts'),{extraId:(obj)=>({name:obj.name})}))).should.eql(
    {entities:{"contacts":{"c1":{id:"c1",name:"vimal1"},
    "c2":{id:"c2",name:"vimal2"}}},result:[{id:"c1",name:"vimal1"},{id:"c2",name:"vimal2"}]}
  );
});


  var normalize = normalizr.normalize,
    Schema = normalizr.Schema,
    arrayOf = normalizr.arrayOf,
    valuesOf = normalizr.valuesOf,
    unionOf = normalizr.unionOf;


it('fails creating entity with non-string name', function () {
    (function () {
      new Schema(42);
    }).should.throw();
  });

  it('fails normalizing something other than array or object', function () {
    (function () {
      normalize(42, {});
    }).should.throw();

    (function () {
      normalize(null, {});
    }).should.throw();

    (function () {
      normalize(undefined, {});
    }).should.throw();

    (function () {
      normalize('42', {});
    }).should.throw();
  });

  it('fails normalizing without an object schema', function () {
    (function () {
      normalize({});
    }).should.throw();

    (function () {
      normalize({}, '42');
    }).should.throw();

    (function () {
      normalize({}, []);
    }).should.throw();
  });

  it('can normalize single entity', function () {
    var article = new Schema('articles'),
        input;

    input = {
      id: 1,
      title: 'Some Article',
      isFavorite: false
    };

    Object.freeze(input);

    article.getIdAttribute().should.eql('id');
    article.getKey().should.eql('articles');

    normalize(input, article).should.eql({
      result: 1,
      entities: {
        articles: {
          1: {
            id: 1,
            title: 'Some Article',
            isFavorite: false
          }
        }
      }
    });
  });
    it('load test', function () {
      function mockObj(nokey){
        var newObj={};
        for(var i=0;i<nokey;i++){
          newObj["key"+i]="test"+i
        }
        newObj["id"]=Math.random(100)+"";
        return newObj;
      }

      var arrObj=[];
      var ticketObj={};

      for(var i=0;i<100 ;i++){
        ticketObj=mockObj(25);
        ticketObj["contact"]=mockObj(30);
        ticketObj["contact"]["account"]=mockObj(100);
        arrObj.push(ticketObj);
      }
      console.time("normalize")
      console.log(normalize(arrObj,
        arrayOf(
          schema("tickets",{
            mapping:{
              contact:schema("contacts",{
                mapping:{
                  account:schema("accounts")
                }
              })
            }
          })
        )
      ))
      console.timeEnd("normalize")
    })
  it('can normalize nested entity and delete an existing key using custom function', function () {
    var article = new Schema('articles'),
        type = new Schema('types'),
        input;

    article.define({
      type: type
    });
    console.log(article.get())
    input = {
      id: 1,
      title: 'Some Article',
      isFavorite: false,
      typeId: 1,
      type: {
        id: 1,
      }
    };

    Object.freeze(input);

    var options = {
      assignEntity: function(obj, key, val, originalInput, schema) {
      //  obj[key] = val;
        delete obj[key + 'Id'];
      }
    };

    normalize(input, article, options).should.eql({
      result: 1,
      entities: {
        articles: {
          1: {
            id: 1,
            title: 'Some Article',
            isFavorite: false,
            type: 1
          }
        },
        types: {
          1: {
            id: 1
          }
        }
      }
    });
  });

  it('can update key values based on original input using a custom function', function () {
    var article = new Schema('articles'),
        author = new Schema('authors'),
        input;

    article.define({
      author: author
    });

    input = {
      id: '123',
      title: 'My article',
      author: {
        id: '321',
        screenName: 'paul'
      },
      media: [
        {
          id: '1345',
          url: 'https://bit.ly/...'
        }
      ]
    };

    var options = {
      assignEntity: function (obj, key, val, originalInput, schema) {
        if (key === 'media') {
          var screenName = originalInput.author.screenName;
          val = map(val, function (media, i) {
            return merge({}, media, {
              mediaViewUrl: '/' + screenName + '/articles/' + obj.id + '/photos/' + i
            });
          });
        }
        obj[key] = val;
      }
    };

    normalize(input, article, options).should.eql({
      entities: {
        articles: {
          '123': {
            id: '123',
            title: 'My article',
            author: '321',
            media: [
              {
                id: '1345',
                url: 'https://bit.ly/...',
                mediaViewUrl: '/paul/articles/123/photos/0'
              }
            ]
          }
        },
        authors: {
          '321': {
            id: '321',
            screenName: 'paul'
          }
        }
      },
      result: '123'
    });
  });

  it('can specify meta properties on a schema which are then accessible in assignEntity', function () {
    var article = new Schema('articles', { meta: { removeProps: ['year', 'publisher'] }}),
        author = new Schema('authors', { meta: { removeProps: ['born'] }}),
        input;

    article.define({
      authors: arrayOf(author)
    });

    input = {
      id: '123',
      title: 'My article',
      publisher: 'Random',
      year: 2012,
      authors: [{
        id: '321',
        screenName: 'paul',
        born: 1973
      }, {
        id: '678',
        screenName: 'jim',
        born: 1977
      }]
    };

    var options = {
      assignEntity: function (obj, key, val, originalInput, schema) {
        var itemSchema = schema && schema.getItemSchema ? schema.getItemSchema() : schema;
        var removeProps = itemSchema && itemSchema.getMeta && itemSchema.getMeta("removeProps");
        if (!removeProps || removeProps.indexOf(key) < 0)
          obj[key] = val;
      }
    };

    normalize(input, article, options).should.eql({
      entities: {
        articles: {
          '123': {
            id: '123',
            title: 'My article',
            authors: ['321', '678']
          }
        },
        authors: {
          '321': {
            id: '321',
            screenName: 'paul'
          },
          '678': {
            id: '678',
            screenName: 'jim'
          }
        }
      },
      result: '123'
    });
  });

  it('can use EntitySchema-specific assignEntity function', function () {
    var taco = new Schema('tacos', { assignEntity: function (output, key, value, input) {
      if (key === 'filling') {
        output[key] = 'veggie';
        return;
      }
      output[key] = value;
    }});

    var input = Object.freeze({
      id: '123',
      type: 'hardshell',
      filling: 'beef'
    });

    normalize(input, taco).should.eql({
      entities: {
        tacos: {
          '123': { id: '123', type: 'hardshell', filling: 'veggie' }
        }
      },
      result: '123'
    });
  });

  it('can use UnionSchema-specific assignEntity function', function () {
    var user = new Schema('users'),
        group = new Schema('groups', { assignEntity: function (output, key, value, input) {
            if (key === 'name') {
              output.url = '/groups/' + value;
            }
            output[key] = value;
          }
        }),
        member = unionOf({ users: user, groups: group }, { schemaAttribute: 'type' }),
        input;

    group.define({
      members: arrayOf(member),
      owner: member,
      relations: valuesOf(member)
    });

    input = {
      group: {
        id: 1,
        name: 'facebook',
        members: [{
          id: 2,
          type: 'groups',
          name: 'react'
        }, {
          id: 3,
          type: 'users',
          name: 'Huey'
        }],
        owner: {
          id: 4,
          type: 'users',
          name: 'Jason'
        },
        relations: {
          friend: {
            id: 5,
            type: 'users',
            name: 'Nate'
          }
        }
      }
    };

    Object.freeze(input);

    normalize(input, { group: group }).should.eql({
      result: {
        group: 1
      },
      entities: {
        groups: {
          1: {
            id: 1,
            name: 'facebook',
            members: [{
              id: 2,
              schema: 'groups'
            }, {
              id: 3,
              schema: 'users'
            }],
            owner: {
              id: 4,
              schema: 'users'
            },
            relations: {
              friend: {
                id: 5,
                schema: 'users'
              }
            },
            url: '/groups/facebook'
          },
          2: {
            id: 2,
            type: 'groups',
            name: 'react',
            url: '/groups/react'
          }
        },
        users: {
          3: {
            id: 3,
            type: 'users',
            name: 'Huey'
          },
          4: {
            id: 4,
            type: 'users',
            name: 'Jason'
          },
          5: {
            id: 5,
            type: 'users',
            name: 'Nate'
          }
        }
      }
    });
  });

  it('can use Schema-specific assignEntity function in iterables', function () {
    var article = new Schema('articles', {
        assignEntity: function(obj, key, val) {
          if (key === 'collections') {
            obj['collection_ids'] = val;
            if ('collections' in obj) {
              delete obj['collections'];
            }
          } else {
            obj[key] = val;
          }
        }
      }),
      collection = new Schema('collections'),
      input;

    article.define({
      collections: arrayOf(collection)
    });

    input = {
      id: 1,
      title: 'Some Article',
      collections: [{
        id: 1,
        title: 'Awesome Writing',
      }, {
        id: 7,
        title: 'Even Awesomer',
      }]
    };

    Object.freeze(input);

    normalize(input, article).should.eql({
      result: 1,
      entities: {
        articles: {
          1: {
            id: 1,
            title: 'Some Article',
            collection_ids: [1, 7]
          },
        },
        collections: {
          1: {
            id: 1,
            title: 'Awesome Writing',
          },
          7: {
            id: 7,
            title: 'Even Awesomer',
          }
        },
      }
    });
  });

  it('throws if getMeta is called with invalid params', function () {
    var article = new Schema('articles', { meta: { removeProps: ['year', 'publisher'] }});

    (function() {
      article.getMeta();
    }).should.throw();

    (function() {
      article.getMeta('');
    }).should.throw();

    (function() {
      article.getMeta('missingProp');
    }).should.not.throw();

    (function() {
      article.getMeta('removeProps');
    }).should.not.throw();
  });

  it('can merge into entity using custom function', function () {
    var author = new Schema('authors'),
        input;

    input = {
      author: {
        id: 1,
        name: 'Ada Lovelace',
        contact: {
          phone: '555-0100'
        }
      },
      reviewer: {
        id: 1,
        name: 'Ada Lovelace',
        contact: {
          email: 'ada@lovelace.com'
        }
      }
    }

    Object.freeze(input);

    var options = {
      mergeIntoEntity: function(entityA, entityB, entityKey) {
        var key;

        for (key in entityB) {
          if (!entityB.hasOwnProperty(key)) {
            continue;
          }

          if (!entityA.hasOwnProperty(key) || isEqual(entityA[key], entityB[key])) {
            entityA[key] = entityB[key];
            continue;
          }

          if (isObject(entityA[key]) && isObject(entityB[key])) {
            merge(entityA[key], entityB[key])
            continue;
          }

          console.warn('Unequal data!');
        }
      }
    };

    normalize(input, valuesOf(author), options).should.eql({
      result: {
        author: 1,
        reviewer: 1
      },
      entities: {
        authors: {
          1: {
            id: 1,
            name: 'Ada Lovelace',
            contact: {
              phone: '555-0100',
              email: 'ada@lovelace.com'
            }
          }
        }
      }
    });
  });

  it('can normalize single entity with custom id attribute', function () {
    var article = new Schema('articles', { idAttribute: 'slug' }),
        input;

    input = {
      id: 1,
      slug: 'some-article',
      title: 'Some Article',
      isFavorite: false
    };

    Object.freeze(input);

    article.getIdAttribute().should.eql('slug');
    article.getKey().should.eql('articles');

    normalize(input, article).should.eql({
      result: 'some-article',
      entities: {
        articles: {
          'some-article': {
            id: 1,
            slug: 'some-article',
            title: 'Some Article',
            isFavorite: false
          }
        }
      }
    });
  });

  it('can normalize single entity with custom id attribute function', function () {
    function makeSlug(article) {
      var posted = article.posted,
          title = article.title.toLowerCase().replace(' ', '-');

      return [title, posted.year, posted.month, posted.day].join('-');
    }

    var article = new Schema('articles', { idAttribute: makeSlug }),
        input;

    input = {
      id: 1,
      title: 'Some Article',
      isFavorite: false,
      posted: {
        day: 12,
        month: 3,
        year: 1983
      }
    };

    Object.freeze(input);

    normalize(input, article).should.eql({
      result: 'some-article-1983-3-12',
      entities: {
        articles: {
          'some-article-1983-3-12': {
            id: 1,
            title: 'Some Article',
            isFavorite: false,
            posted: {
              day: 12,
              month: 3,
              year: 1983
            }
          }
        }
      }
    });
  });

  it('can normalize an array', function () {
    var article = new Schema('articles'),
        input;

    input = [{
      id: 1,
      title: 'Some Article'
    }, {
      id: 2,
      title: 'Other Article'
    }];

    Object.freeze(input);

    normalize(input, arrayOf(article)).should.eql({
      result: [1, 2],
      entities: {
        articles: {
          1: {
            id: 1,
            title: 'Some Article'
          },
          2: {
            id: 2,
            title: 'Other Article'
          }
        }
      }
    });
  });

  it('can normalize a polymorphic array with schema attribute', function () {
    var article = new Schema('articles'),
        tutorial = new Schema('tutorials'),
        articleOrTutorial = { articles: article, tutorials: tutorial },
        input;

    input = [{
      id: 1,
      type: 'articles',
      title: 'Some Article'
    }, {
      id: 1,
      type: 'tutorials',
      title: 'Some Tutorial'
    }];

    Object.freeze(input);

    normalize(input, arrayOf(articleOrTutorial, { schemaAttribute: 'type' })).should.eql({
      result: [
        {id: 1, schema: 'articles'},
        {id: 1, schema: 'tutorials'}
      ],
      entities: {
        articles: {
          1: {
            id: 1,
            type: 'articles',
            title: 'Some Article'
          }
        },
        tutorials: {
          1: {
            id: 1,
            type: 'tutorials',
            title: 'Some Tutorial'
          }
        }
      }
    });
  });

  it('can normalize a polymorphic array with schema attribute function', function () {
    function guessSchema(item) {
      return item.type + 's';
    }

    var article = new Schema('articles'),
        tutorial = new Schema('tutorials'),
        articleOrTutorial = { articles: article, tutorials: tutorial },
        input;

    input = [{
      id: 1,
      type: 'article',
      title: 'Some Article'
    }, {
      id: 1,
      type: 'tutorial',
      title: 'Some Tutorial'
    }];

    Object.freeze(input);

    normalize(input, arrayOf(articleOrTutorial, { schemaAttribute: guessSchema })).should.eql({
      result: [
        { id: 1, schema: 'articles' },
        { id: 1, schema: 'tutorials' }
      ],
      entities: {
        articles: {
          1: {
            id: 1,
            type: 'article',
            title: 'Some Article'
          }
        },
        tutorials: {
          1: {
            id: 1,
            type: 'tutorial',
            title: 'Some Tutorial'
          }
        }
      }
    });
  });

  it('can normalize a map', function () {
    var article = new Schema('articles'),
        input;

    input = {
      one: {
        id: 1,
        title: 'Some Article'
      },
      two: {
        id: 2,
        title: 'Other Article'
      }
    };

    Object.freeze(input);

    normalize(input, valuesOf(article)).should.eql({
      result: {
        one: 1,
        two: 2
      },
      entities: {
        articles: {
          1: {
            id: 1,
            title: 'Some Article'
          },
          2: {
            id: 2,
            title: 'Other Article'
          }
        }
      }
    });
  });

  it('can normalize a polymorphic map with schema attribute', function () {
    var article = new Schema('articles'),
        tutorial = new Schema('tutorials'),
        articleOrTutorial = { articles: article, tutorials: tutorial },
        input;

    input = {
      one: {
        id: 1,
        type: 'articles',
        title: 'Some Article'
      },
      two: {
        id: 2,
        type: 'articles',
        title: 'Another Article'
      },
      three: {
        id: 1,
        type: 'tutorials',
        title: 'Some Tutorial'
      }
    };

    Object.freeze(input);

    normalize(input, valuesOf(articleOrTutorial, { schemaAttribute: 'type' })).should.eql({
      result: {
        one: {id: 1, schema: 'articles'},
        two: {id: 2, schema: 'articles'},
        three: {id: 1, schema: 'tutorials'}
      },
      entities: {
        articles: {
          1: {
            id: 1,
            type: 'articles',
            title: 'Some Article'
          },
          2: {
            id: 2,
            type: 'articles',
            title: 'Another Article'
          }
        },
        tutorials: {
          1: {
            id: 1,
            type: 'tutorials',
            title: 'Some Tutorial'
          }
        }
      }
    });
  });

  it('can normalize a polymorphic map with schema attribute function', function () {
    function guessSchema(item) {
      return item.type + 's';
    }

    var article = new Schema('articles'),
        tutorial = new Schema('tutorials'),
        articleOrTutorial = { articles: article, tutorials: tutorial },
        input;

    input = {
      one: {
        id: 1,
        type: 'article',
        title: 'Some Article'
      },
      two: {
        id: 2,
        type: 'article',
        title: 'Another Article'
      },
      three: {
        id: 1,
        type: 'tutorial',
        title: 'Some Tutorial'
      }
    };

    Object.freeze(input);

    normalize(input, valuesOf(articleOrTutorial, { schemaAttribute: guessSchema })).should.eql({
      result: {
        one: {id: 1, schema: 'articles'},
        two: {id: 2, schema: 'articles'},
        three: {id: 1, schema: 'tutorials'}
      },
      entities: {
        articles: {
          1: {
            id: 1,
            type: 'article',
            title: 'Some Article'
          },
          2: {
            id: 2,
            type: 'article',
            title: 'Another Article'
          }
        },
        tutorials: {
          1: {
            id: 1,
            type: 'tutorial',
            title: 'Some Tutorial'
          }
        }
      }
    });
  });

  it('can normalize nested entities', function () {
    var article = new Schema('articles'),
        user = new Schema('users'),
        input;

    article.define({
      author: user
    });

    input = {
      id: 1,
      title: 'Some Article',
      author: {
        id: 3,
        name: 'Mike Persson'
      }
    };

    Object.freeze(input);

    normalize(input, article).should.eql({
      result: 1,
      entities: {
        articles: {
          1: {
            id: 1,
            title: 'Some Article',
            author: 3
          }
        },
        users: {
          3: {
            id: 3,
            name: 'Mike Persson'
          }
        }
      }
    });
  });

  it('can normalize deeply nested entities with arrays', function () {
    var article = new Schema('articles'),
        user = new Schema('users'),
        collection = new Schema('collections'),
        feedSchema,
        input;

    article.define({
      author: user,
      collections: arrayOf(collection)
    });

    collection.define({
      curator: user
    });

    feedSchema = {
      feed: arrayOf(article)
    };

    input = {
      feed: [{
        id: 1,
        title: 'Some Article',
        author: {
          id: 3,
          name: 'Mike Persson'
        },
        collections: [{
          id: 1,
          title: 'Awesome Writing',
          curator: {
            id: 4,
            name: 'Andy Warhol'
          }
        }, {
          id: 7,
          title: 'Even Awesomer',
          curator: {
            id: 100,
            name: 'T.S. Eliot'
          }
        }]
      }, {
        id: 2,
        title: 'Other Article',
        collections: [{
          id: 2,
          title: 'Neverhood',
          curator: {
            id: 120,
            name: 'Ada Lovelace'
          }
        }],
        author: {
          id: 2,
          name: 'Pete Hunt'
        }
      }]
    };

    Object.freeze(input);

    normalize(input, feedSchema).should.eql({
      result: {
        feed: [1, 2]
      },
      entities: {
        articles: {
          1: {
            id: 1,
            title: 'Some Article',
            author: 3,
            collections: [1, 7]
          },
          2: {
            id: 2,
            title: 'Other Article',
            author: 2,
            collections: [2]
          }
        },
        collections: {
          1: {
            id: 1,
            title: 'Awesome Writing',
            curator: 4
          },
          2: {
            id: 2,
            title: 'Neverhood',
            curator: 120
          },
          7: {
            id: 7,
            title: 'Even Awesomer',
            curator: 100
          }
        },
        users: {
          2: {
            id: 2,
            name: 'Pete Hunt'
          },
          3: {
            id: 3,
            name: 'Mike Persson'
          },
          4: {
            id: 4,
            name: 'Andy Warhol'
          },
          100: {
            id: 100,
            name: 'T.S. Eliot'
          },
          120: {
            id: 120,
            name: 'Ada Lovelace'
          }
        }
      }
    });
  });

  it('can normalize deeply nested entities with polymorphic arrays', function () {
    var article = new Schema('articles'),
        tutorial = new Schema('tutorials'),
        articleOrTutorial = { articles: article, tutorials: tutorial },
        user = new Schema('users'),
        collection = new Schema('collections'),
        feedSchema,
        input;

    article.define({
      author: user,
      collections: arrayOf(collection)
    });

    tutorial.define({
      author: user,
      collections: arrayOf(collection)
    });

    collection.define({
      curator: user
    });

    feedSchema = {
      feed: arrayOf(articleOrTutorial, { schemaAttribute: 'type' })
    };

    input = {
      feed: [{
        id: 1,
        type: 'articles',
        title: 'Some Article',
        author: {
          id: 3,
          name: 'Mike Persson'
        },
        collections: [{
          id: 1,
          title: 'Awesome Writing',
          curator: {
            id: 4,
            name: 'Andy Warhol'
          }
        }, {
          id: 7,
          title: 'Even Awesomer',
          curator: {
            id: 100,
            name: 'T.S. Eliot'
          }
        }]
      }, {
        id: 1,
        type: 'tutorials',
        title: 'Some Tutorial',
        collections: [{
          id: 2,
          title: 'Neverhood',
          curator: {
            id: 120,
            name: 'Ada Lovelace'
          }
        }],
        author: {
          id: 2,
          name: 'Pete Hunt'
        }
      }]
    };

    Object.freeze(input);

    normalize(input, feedSchema).should.eql({
      result: {
        feed: [
          { id: 1, schema: 'articles' },
          { id: 1, schema: 'tutorials' }
        ]
      },
      entities: {
        articles: {
          1: {
            id: 1,
            type: 'articles',
            title: 'Some Article',
            author: 3,
            collections: [1, 7]
          }
        },
        tutorials: {
          1: {
            id: 1,
            type: 'tutorials',
            title: 'Some Tutorial',
            author: 2,
            collections: [2]
          }
        },
        collections: {
          1: {
            id: 1,
            title: 'Awesome Writing',
            curator: 4
          },
          2: {
            id: 2,
            title: 'Neverhood',
            curator: 120
          },
          7: {
            id: 7,
            title: 'Even Awesomer',
            curator: 100
          }
        },
        users: {
          2: {
            id: 2,
            name: 'Pete Hunt'
          },
          3: {
            id: 3,
            name: 'Mike Persson'
          },
          4: {
            id: 4,
            name: 'Andy Warhol'
          },
          100: {
            id: 100,
            name: 'T.S. Eliot'
          },
          120: {
            id: 120,
            name: 'Ada Lovelace'
          }
        }
      }
    });
  });

  it('can normalize deeply nested entities with maps', function () {
    var article = new Schema('articles'),
        user = new Schema('users'),
        feedSchema,
        input;

    article.define({
      collaborators: valuesOf(arrayOf(user))
    });

    feedSchema = {
      feed: arrayOf(article),
      suggestions: valuesOf(arrayOf(article))
    };

    input = {
      feed: [{
        id: 1,
        title: 'Some Article',
        collaborators: {
          authors: [{
            id: 3,
            name: 'Mike Persson'
          }],
          reviewers: [{
            id: 2,
            name: 'Pete Hunt'
          }]
        }
      }, {
        id: 2,
        title: 'Other Article',
        collaborators: {
          authors: [{
            id: 2,
            name: 'Pete Hunt'
          }]
        }
      }, {
        id: 3,
        title: 'Last Article'
      }],
      suggestions: {
        1: [{
          id: 2,
          title: 'Other Article',
          collaborators: {
            authors: [{
              id: 2,
              name: 'Pete Hunt'
            }]
          }
        }, {
          id: 3,
          title: 'Last Article'
        }]
      }
    };

    Object.freeze(input);

    normalize(input, feedSchema).should.eql({
      result: {
        feed: [1, 2, 3],
        suggestions: {
          1: [2, 3]
        }
      },
      entities: {
        articles: {
          1: {
            id: 1,
            title: 'Some Article',
            collaborators: {
              authors: [3],
              reviewers: [2]
            }
          },
          2: {
            id: 2,
            title: 'Other Article',
            collaborators: {
              authors: [2]
            }
          },
          3: {
            id: 3,
            title: 'Last Article'
          }
        },
        users: {
          2: {
            id: 2,
            name: 'Pete Hunt'
          },
          3: {
            id: 3,
            name: 'Mike Persson'
          }
        }
      }
    });
  });

  it('can normalize deeply nested entities with polymorphic maps', function () {
    var article = new Schema('articles'),
        user = new Schema('users'),
        group = new Schema('groups'),
        userOrGroup = { users: user, groups: group },
        feedSchema,
        input;

    article.define({
      collaborators: valuesOf(userOrGroup, { schemaAttribute: 'type' })
    });

    feedSchema = {
      feed: arrayOf(article),
      suggestions: valuesOf(arrayOf(article))
    };

    input = {
      feed: [{
        id: 1,
        title: 'Some Article',
        collaborators: {
          author: {
            id: 3,
            type: 'users',
            name: 'Mike Persson'
          },
          reviewer: {
            id: 2,
            type: 'groups',
            name: 'Reviewer Group'
          }
        }
      }, {
        id: 2,
        title: 'Other Article',
        collaborators: {
          author: {
            id: 2,
            type: 'users',
            name: 'Pete Hunt'
          }
        }
      }, {
        id: 3,
        title: 'Last Article'
      }],
      suggestions: {
        1: [{
          id: 2,
          title: 'Other Article'
        }, {
          id: 3,
          title: 'Last Article'
        }]
      }
    };

    Object.freeze(input);

    normalize(input, feedSchema).should.eql({
      result: {
        feed: [1, 2, 3],
        suggestions: {
          1: [2, 3]
        }
      },
      entities: {
        articles: {
          1: {
            id: 1,
            title: 'Some Article',
            collaborators: {
              author: { id: 3, schema: 'users' },
              reviewer: { id: 2, schema: 'groups' }
            }
          },
          2: {
            id: 2,
            title: 'Other Article',
            collaborators: {
              author: { id: 2, schema: 'users' }
            }
          },
          3: {
            id: 3,
            title: 'Last Article'
          }
        },
        users: {
          2: {
            id: 2,
            type: 'users',
            name: 'Pete Hunt'
          },
          3: {
            id: 3,
            type: 'users',
            name: 'Mike Persson'
          }
        },
        groups: {
          2: {
            id: 2,
            type: 'groups',
            name: 'Reviewer Group'
          }
        }
      }
    });
  });

  it('can normalize mutually recursive entities', function () {
    var article = new Schema('articles'),
        user = new Schema('users'),
        collection = new Schema('collections'),
        feedSchema,
        input;

    user.define({
      articles: arrayOf(article)
    });

    article.define({
      collections: arrayOf(collection)
    });

    collection.define({
      subscribers: arrayOf(user)
    });

    feedSchema = {
      feed: arrayOf(article)
    };

    input = {
      feed: [{
        id: 1,
        title: 'Some Article',
        collections: [{
          id: 1,
          title: 'Awesome Writing',
          subscribers: [{
            id: 4,
            name: 'Andy Warhol',
            articles: [{
              id: 1,
              title: 'Some Article'
            }]
          }, {
            id: 100,
            name: 'T.S. Eliot',
            articles: [{
              id: 1,
              title: 'Some Article'
            }]
          }]
        }, {
          id: 7,
          title: 'Even Awesomer',
          subscribers: [{
            id: 100,
            name: 'T.S. Eliot',
            articles: [{
              id: 1,
              title: 'Some Article'
            }]
          }]
        }]
      }]
    };

    Object.freeze(input);

    normalize(input, feedSchema).should.eql({
      result: {
        feed: [1]
      },
      entities: {
        articles: {
          1: {
            id: 1,
            title: 'Some Article',
            collections: [1, 7]
          }
        },
        collections: {
          1: {
            id: 1,
            title: 'Awesome Writing',
            subscribers: [4, 100]
          },
          7: {
            id: 7,
            title: 'Even Awesomer',
            subscribers: [100]
          }
        },
        users: {
          4: {
            id: 4,
            name: 'Andy Warhol',
            articles: [1]
          },
          100: {
            id: 100,
            name: 'T.S. Eliot',
            articles: [1]
          }
        }
      }
    });
  });

  it('can normalize self-recursive entities', function () {
    var user = new Schema('users'),
        input;

    user.define({
      parent: user
    });

    input = {
      id: 1,
      name: 'Andy Warhol',
      parent: {
        id: 7,
        name: 'Tom Dale',
        parent: {
          id: 4,
          name: 'Pete Hunt'
        }
      }
    };

    Object.freeze(input);

    normalize(input, user).should.eql({
      result: 1,
      entities: {
        users: {
          1: {
            id: 1,
            name: 'Andy Warhol',
            parent: 7
          },
          7: {
            id: 7,
            name: 'Tom Dale',
            parent: 4
          },
          4: {
            id: 4,
            name: 'Pete Hunt'
          }
        }
      }
    });
  });

  it('can merge entities', function () {
    var writer = new Schema('writers'),
        book = new Schema('books'),
        schema = arrayOf(writer),
        input;

    writer.define({
      books: arrayOf(book)
    });

    input = [{
      id: 3,
      name: 'Jo Rowling',
      isBritish: true,
      location: {
        x: 100,
        y: 200,
        nested: ['hello', {
          world: true
        }]
      },
      books: [{
        id: 1,
        soldWell: true,
        name: 'Harry Potter'
      }]
    }, {
      id: 3,
      name: 'Jo Rowling',
      bio: 'writer',
      location: {
        x: 100,
        y: 200,
        nested: ['hello', {
          world: true
        }]
      },
      books: [{
        id: 1,
        isAwesome: true,
        name: 'Harry Potter'
      }]
    }];

    normalize(input, schema).should.eql({
      result: [3, 3],
      entities: {
        writers: {
          3: {
            id: 3,
            isBritish: true,
            name: 'Jo Rowling',
            bio: 'writer',
            books: [1],
            location: {
              x: 100,
              y: 200,
              nested: ['hello', {
                world: true
              }]
            }
          }
        },
        books: {
          1: {
            id: 1,
            isAwesome: true,
            soldWell: true,
            name: 'Harry Potter'
          }
        }
      }
    });
  });

  it('warns about inconsistencies when merging entities', function () {
    var writer = new Schema('writers'),
        book = new Schema('books'),
        schema = arrayOf(writer),
        input;

    writer.define({
      books: arrayOf(book)
    });

    input = [{
      id: 3,
      name: 'Jo Rowling',
      books: [{
        id: 1,
        soldWell: true,
        name: 'Harry Potter'
      }]
    }, {
      id: 3,
      name: 'Jo Rowling',
      books: [{
        id: 1,
        soldWell: false,
        name: 'Harry Potter'
      }]
    }];

    var warnCalled = false,
        realConsoleWarn;

    function mockWarn() {
      warnCalled = true;
    }

    realConsoleWarn = console.warn;
    console.warn = mockWarn;

    normalize(input, schema).should.eql({
      result: [3, 3],
      entities: {
        writers: {
          3: {
            id: 3,
            name: 'Jo Rowling',
            books: [1]
          }
        },
        books: {
          1: {
            id: 1,
            soldWell: true,
            name: 'Harry Potter'
          }
        }
      }
    });

    warnCalled.should.eq(true);
    console.warn = realConsoleWarn;
  });

  it('ignores prototype objects and creates new object', function () {
    var writer = new Schema('writers'),
        schema = writer,
        input;
    input = {
      id: 'constructor',
      name: 'Constructor',
      isAwesome: true
    };

    normalize(input, schema).should.eql({
      result: 'constructor',
      entities: {
        writers: {
          constructor: {
            id: 'constructor',
            name: 'Constructor',
            isAwesome: true
          }
        }
      }
    });

  });




  it('can normalize a polymorphic union field and array and map', function () {
    var user = new Schema('users'),
        group = new Schema('groups'),
        member = unionOf({
          users: user,
          groups: group
        }, { schemaAttribute: 'type' }),
        input;

    group.define({
      members: arrayOf(member),
      owner: member,
      relations: valuesOf(member)
    });

    input = {
      group: {
        id: 1,
        name: 'facebook',
        members: [{
          id: 2,
          type: 'groups',
          name: 'react'
        }, {
          id: 3,
          type: 'users',
          name: 'Huey'
        }],
        owner: {
          id: 4,
          type: 'users',
          name: 'Jason'
        },
        relations: {
          friend: {
            id: 5,
            type: 'users',
            name: 'Nate'
          }
        }
      }
    };

    Object.freeze(input);

    normalize(input, { group: group }).should.eql({
      result: {
        group: 1
      },
      entities: {
        groups: {
          1: {
            id: 1,
            name: 'facebook',
            members: [{
              id: 2,
              schema: 'groups'
            }, {
              id: 3,
              schema: 'users'
            }],
            owner: {
              id: 4,
              schema: 'users'
            },
            relations: {
              friend: {
                id: 5,
                schema: 'users'
              }
            }
          },
          2: {
            id: 2,
            type: 'groups',
            name: 'react'
          }
        },
        users: {
          3: {
            id: 3,
            type: 'users',
            name: 'Huey'
          },
          4: {
            id: 4,
            type: 'users',
            name: 'Jason'
          },
          5: {
            id: 5,
            type: 'users',
            name: 'Nate'
          }
        }
      }
    });
  });

  it('fails creating union schema without schemaAttribute', function () {
    (function () {
      var user = new Schema('users'),
          group = new Schema('groups'),
          member = unionOf({
            users: user,
            groups: group
          });
    }).should.throw();
  });*/
});
