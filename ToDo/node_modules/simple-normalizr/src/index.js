import selectn from 'selectn';
const defaultEntityAssignment=(obj)=>{
  return obj;
}
export function simple(entity,obj,schema){
  var id=obj[schema.id];
  entity[obj[schema.id]]=schema.entityAssignment(obj,entity);
  return {
    result:id
  };
}
export function array(entity,objs,schema){
  if(Array.isArray(objs)){
    var ids=objs.map((obj)=>{
      var id=obj[schema.id];
      entity[id]=schema.entityAssignment(obj,entity);
      return id
    });
    return {
      result:ids
    };
  }
  else{
    var ids=Object.keys(objs).reduce((res,objKey)=>{
      var id=objKey;
      entity[id]=schema.entityAssignment(objs[objKey],entity);
      res[id]=id;
      return res;
    },{});
    return {
      result:ids
    };
  }
}

export const normalizer = (schema)=>(obj)=>normalize1(obj,schema);

export function normalize1(obj,schema,entities={},level=0){
  if(schema.map){
    Object.keys(schema.map).forEach((key)=>{
      if(schema.group=="object"){
        level=level+1;
        if(key.split(".").length==1){
          if(obj[key]){
            var {result}=normalize1(obj[key],schema.map[key],entities,level);
            obj[key]=result;
          }
        }
        else{
          var obj1=selectn(key.split(".").slice(0,key.split(".").length-1).join("."),obj);
          var key1=key.split(".")[key.split(".").length-1];
          if(obj1[key1]){
            var {result}=normalize1(obj1[key1],schema.map[key],entities,level);
            obj1[key1]=result;
          }
        }
        level=level-1;
      }
      else if(schema.group=="array"){
        obj.forEach((iobj)=>{
          level=level+1;

          if(key.split(".").length==1){
            if(iobj[key]){
              var {result}=normalize1(iobj[key],schema.map[key],entities,level);
              iobj[key]=result;
            }
          }
          else{
            var obj1=selectn(key.split(".").slice(0,key.split(".").length-1).join("."),iobj);
            var key1=key.split(".")[key.split(".").length-1];
              if(obj1[key1]){
                var {result}=normalize1(obj1[key1],schema.map[key],entities,level);
                obj1[key1]=result;
              }
          }
          level=level-1;
        });
      }
    })
  }
  if(schema.group=="array"){
    var normalized;
    if(typeof schema.entityName == "string"){
      entities[schema.entityName]=entities[schema.entityName] || {};
      normalized=array(entities[schema.entityName],obj,schema);
    }
    else {
      var unionSchema=schema;
      var aob=[];
      obj.forEach((obj1)=>{
        schema=unionSchema.entityName.union[obj1[unionSchema.entityName.key]];
        entities[schema.entityName]=entities[schema.entityName] || {};
        level++;
        normalized=normalize1(obj1,schema,entities,level);
        level--;
        var ob={}
        ob.id=normalized.result;
        ob[unionSchema.entityName.key]=obj1[unionSchema.entityName.key];
        aob.push(ob)
      })
      normalized.result=aob;
    }
  }
  else {
    var normalized;
    if(typeof schema.entityName == "string"){
      entities[schema.entityName]=entities[schema.entityName] || {};
      normalized=simple(entities[schema.entityName],obj,schema);
    }
    else {
      var unionSchema=schema;
      schema=schema.entityName.union[obj[schema.entityName.key]];
      entities[schema.entityName]=entities[schema.entityName] || {};
      level++;
      normalized=normalize1(obj,schema,entities,level);
      level--;
      var ob={}
      ob.id=normalized.result;
      ob[unionSchema.entityName.key]=obj[unionSchema.entityName.key];
      normalized.result=ob;
    }
  }
  if(level!=0)
  return normalized
  else{
    return {entities:entities,result:normalized.result}
  }
}
export function schema(entityName,{mapping=null,id='id',group="object",entityAssignment=null}={}){
  var entityAssignment=entityAssignment || defaultEntityAssignment
  return {
    id,
    entityName,
    group,
    map:mapping,
    entityAssignment
  }
}
export function arrayOf(ob){
  return Object.assign({},ob,{group:"array"});//No I18N
}
export const normalize = (obj,schema) => {
    return normalize1(obj,schema)
}


