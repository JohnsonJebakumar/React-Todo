"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalize = exports.normalizer = undefined;
exports.simple = simple;
exports.array = array;
exports.normalize1 = normalize1;
exports.schema = schema;
exports.arrayOf = arrayOf;

var _selectn = require("selectn");

var _selectn2 = _interopRequireDefault(_selectn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultEntityAssignment = function defaultEntityAssignment(obj) {
  return obj;
};
function simple(entity, obj, schema) {
  var id = obj[schema.id];
  entity[obj[schema.id]] = schema.entityAssignment(obj, entity);
  return {
    result: id
  };
}
function array(entity, objs, schema) {
  if (Array.isArray(objs)) {
    var ids = objs.map(function (obj) {
      var id = obj[schema.id];
      entity[id] = schema.entityAssignment(obj, entity);
      return id;
    });
    return {
      result: ids
    };
  } else {
    var ids = Object.keys(objs).reduce(function (res, objKey) {
      var id = objKey;
      entity[id] = schema.entityAssignment(objs[objKey], entity);
      res[id] = id;
      return res;
    }, {});
    return {
      result: ids
    };
  }
}

var normalizer = exports.normalizer = function normalizer(schema) {
  return function (obj) {
    return normalize1(obj, schema);
  };
};

function normalize1(obj, schema) {
  var entities = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

  if (schema.map) {
    Object.keys(schema.map).forEach(function (key) {
      if (schema.group == "object") {
        level = level + 1;
        if (key.split(".").length == 1) {
          if (obj[key]) {
            var _normalize = normalize1(obj[key], schema.map[key], entities, level),
                result = _normalize.result;

            obj[key] = result;
          }
        } else {
          var obj1 = (0, _selectn2.default)(key.split(".").slice(0, key.split(".").length - 1).join("."), obj);
          var key1 = key.split(".")[key.split(".").length - 1];
          if (obj1[key1]) {
            var _normalize2 = normalize1(obj1[key1], schema.map[key], entities, level),
                result = _normalize2.result;

            obj1[key1] = result;
          }
        }
        level = level - 1;
      } else if (schema.group == "array") {
        obj.forEach(function (iobj) {
          level = level + 1;

          if (key.split(".").length == 1) {
            if (iobj[key]) {
              var _normalize3 = normalize1(iobj[key], schema.map[key], entities, level),
                  result = _normalize3.result;

              iobj[key] = result;
            }
          } else {
            var obj1 = (0, _selectn2.default)(key.split(".").slice(0, key.split(".").length - 1).join("."), iobj);
            var key1 = key.split(".")[key.split(".").length - 1];
            if (obj1[key1]) {
              var _normalize4 = normalize1(obj1[key1], schema.map[key], entities, level),
                  result = _normalize4.result;

              obj1[key1] = result;
            }
          }
          level = level - 1;
        });
      }
    });
  }
  if (schema.group == "array") {
    var normalized;
    if (typeof schema.entityName == "string") {
      entities[schema.entityName] = entities[schema.entityName] || {};
      normalized = array(entities[schema.entityName], obj, schema);
    } else {
      var unionSchema = schema;
      var aob = [];
      obj.forEach(function (obj1) {
        schema = unionSchema.entityName.union[obj1[unionSchema.entityName.key]];
        entities[schema.entityName] = entities[schema.entityName] || {};
        level++;
        normalized = normalize1(obj1, schema, entities, level);
        level--;
        var ob = {};
        ob.id = normalized.result;
        ob[unionSchema.entityName.key] = obj1[unionSchema.entityName.key];
        aob.push(ob);
      });
      normalized.result = aob;
    }
  } else {
    var normalized;
    if (typeof schema.entityName == "string") {
      entities[schema.entityName] = entities[schema.entityName] || {};
      normalized = simple(entities[schema.entityName], obj, schema);
    } else {
      var unionSchema = schema;
      schema = schema.entityName.union[obj[schema.entityName.key]];
      entities[schema.entityName] = entities[schema.entityName] || {};
      level++;
      normalized = normalize1(obj, schema, entities, level);
      level--;
      var ob = {};
      ob.id = normalized.result;
      ob[unionSchema.entityName.key] = obj[unionSchema.entityName.key];
      normalized.result = ob;
    }
  }
  if (level != 0) return normalized;else {
    return { entities: entities, result: normalized.result };
  }
}
function schema(entityName) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$mapping = _ref.mapping,
      mapping = _ref$mapping === undefined ? null : _ref$mapping,
      _ref$id = _ref.id,
      id = _ref$id === undefined ? 'id' : _ref$id,
      _ref$group = _ref.group,
      group = _ref$group === undefined ? "object" : _ref$group,
      _ref$entityAssignment = _ref.entityAssignment,
      entityAssignment = _ref$entityAssignment === undefined ? null : _ref$entityAssignment;

  var entityAssignment = entityAssignment || defaultEntityAssignment;
  return {
    id: id,
    entityName: entityName,
    group: group,
    map: mapping,
    entityAssignment: entityAssignment
  };
}
function arrayOf(ob) {
  return Object.assign({}, ob, { group: "array" }); //No I18N
}
var normalize = exports.normalize = function normalize(obj, schema) {
  return normalize1(obj, schema);
};