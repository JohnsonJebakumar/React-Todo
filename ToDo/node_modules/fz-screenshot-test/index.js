var chrome = require("./src/chrome.js");
var imgCompare = require("./src/imgCompare.js");
var check = require("./src/check.js")
var path = require("path");
var fs = require("fs");
var view=require("./view.js");
var request = require('request');

var folderPrefix = "my_ui_";
var url="www.google.com";
var resObj = {};
var tmpRes = [];
var newlyAddedFiles = [];
global.URLs={};
var interval = null;
var browserList=["chrome"];

const run = function(confObj,callBack)
{
	browserList=confObj.browserList ? confObj.browserList: browserList;
	url = confObj.url ? confObj.url : url;
	var isTest = (confObj.mode == "test");
	var folderName = isTest ? folderPrefix+"test" : folderPrefix+"reference";

	var driver = chrome.getBrowser(url,confObj.seleniumHub,browserList[browserList.length-1]);
	var errfiles=[]; 

	var refreshPage=function(err){
		if(err.error!==null){
			if(browserList[browserList.length-1]!=="firefox")
			{
				chrome.executeScript(driver,"window.location.reload();");
				if(errfiles.indexOf(err.name) < 0 && !err.name=="")
				{
					errfiles.push(err.name);
				}			
			}
			
		}
	};

	chrome.executeScript(driver,confObj.script).then( function (URLs)
	{
		global.URLs=URLs
		var comURLS= Object.keys(global.URLs)
		if(comURLS.length>1)
		{
			for (var i in comURLS)
			{
				if(comURLS[i].indexOf("_")!==-1)
				{
					chrome.executeScript(driver,'window.location.hash='+JSON.stringify(comURLS[i]));
					var err = chrome.executeScript(driver,'try{return(funct());}catch(err){console.loog(err)}').then(refreshPage);
					var fileName = browserList[browserList.length-1]+"_"+comURLS[i];
					chrome.takeScreenshot(driver,folderName,fileName)
				}
			}
			resObj.errorfiles = errfiles;
		}
	});

	driver.quit().then(function ()
	{
		var ListURLS= Object.keys(global.URLs);
		if(ListURLS.length>1)
		{
			if (isTest)
			{
				browserList.splice(-1,1)
				if(browserList.length>0)
				{
					confObj.browserList=browserList;
					run(confObj,callBack);
				}
				else
				{
					url = url.substring(0,url.lastIndexOf('/')) + "/js/moduleStats.js";
					request(url, function (error, response, body) {
						if(error)
						{
							return err;
						}
						else
						{
							
							fs.writeFile('./screenShots/mData.js',body+"; var resObj="+JSON.stringify(resObj)+"; var component="+JSON.stringify(global.URLs), (err) => {
								if(err)
								{
									throw err;
								}
							});
							callBack(true);
						}
					});
				}
			}
			else
			{
				browserList.splice(-1,1)
				if(browserList.length>0)
				{
					confObj.browserList=browserList;
					run(confObj,callBack);
				}
				else
				{
					test(callBack);
				}
			}
		}
		else
		{
			callBack(false);
		}
	});
}

const test = function (callBack) {

	var testFolderName = process.cwd()+path.sep+'screenShots'+path.sep+folderPrefix+"test";
	var refFolderName = process.cwd()+path.sep+'screenShots'+path.sep+folderPrefix+"reference";
	var diffFolderName = process.cwd()+path.sep+'screenShots'+path.sep+folderPrefix+"diff";
	if (!fs.existsSync(diffFolderName)){
    	fs.mkdirSync(diffFolderName);
	}
	var allFile = fs.readdirSync(testFolderName);
	var testRes = allFile.map(function (i,j) {
		var diff=check.hasDiff(refFolderName+path.sep+i,testFolderName+path.sep+i,diffFolderName+path.sep+i);
		if(diff>0)
	 	{
	 		imgCompare.getDiff(refFolderName+path.sep+i,testFolderName+path.sep+i,diffFolderName+path.sep+i,tmpRes)
	 	}
	 	else
	 	{
	 		tmpRes.push(false);
	 	}
		if (!fs.existsSync(refFolderName+path.sep+i)) {
			newlyAddedFiles.push(refFolderName+path.sep+i);
		}
	})

	interval = null;
	interval = setInterval(function () {
		if (allFile.length == tmpRes.length) {
			clearInterval(interval);
			resObj.newFiles = newlyAddedFiles;
			view.report(allFile.length == tmpRes.length);
			callBack(true);
		}
	},1000)
}

module.exports = {
	run
}